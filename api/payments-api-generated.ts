/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ACHDetails } from '../models';
// @ts-ignore
import { AccountOwner } from '../models';
// @ts-ignore
import { AccountOwnerHolders } from '../models';
// @ts-ignore
import { AvailableBalance } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { LoanPaymentDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountOwnerDetails: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAccountOwnerDetails', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountOwnerDetails', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/owner`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/owner',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner Details
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {boolean} [withInsights] If this parameter is true, Identity Insights data will be returned along with the account owner information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountOwnerDetails_1: async (customerId: string, accountId: string, withInsights?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAccountOwnerDetails_1', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountOwnerDetails_1', 'accountId', accountId)
            const localVarPath = `/aggregation/v3/customers/{customerId}/accounts/{accountId}/owner`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (withInsights !== undefined) {
                localVarQueryParameter['withInsights'] = withInsights;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v3/customers/{customerId}/accounts/{accountId}/owner',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account ACH Details
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchDetails: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAchDetails', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAchDetails', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/details`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance - Live
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableBalanceLive: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAvailableBalanceLive', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAvailableBalanceLive', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance/live`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance/live',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestCachedBalance: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getLatestCachedBalance', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getLatestCachedBalance', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/availableBalance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Loan Payment Details
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanPaymentDetails: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getLoanPaymentDetails', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getLoanPaymentDetails', 'accountId', accountId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/accounts/{accountId}/loanDetails`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/accounts/{accountId}/loanDetails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner
         * @param {PaymentsApiGetAccountOwnerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountOwnerDetails(requestParameters: PaymentsApiGetAccountOwnerDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOwner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountOwnerDetails(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner Details
         * @param {PaymentsApiGetAccountOwnerDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountOwnerDetails_1(requestParameters: PaymentsApiGetAccountOwnerDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOwnerHolders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountOwnerDetails_1(requestParameters.customerId, requestParameters.accountId, requestParameters.withInsights, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account ACH Details
         * @param {PaymentsApiGetAchDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAchDetails(requestParameters: PaymentsApiGetAchDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACHDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAchDetails(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance - Live
         * @param {PaymentsApiGetAvailableBalanceLiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableBalanceLive(requestParameters: PaymentsApiGetAvailableBalanceLiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableBalanceLive(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance
         * @param {PaymentsApiGetLatestCachedBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestCachedBalance(requestParameters: PaymentsApiGetLatestCachedBalanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestCachedBalance(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Loan Payment Details
         * @param {PaymentsApiGetLoanPaymentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanPaymentDetails(requestParameters: PaymentsApiGetLoanPaymentDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoanPaymentDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanPaymentDetails(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner
         * @param {PaymentsApiGetAccountOwnerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountOwnerDetails(requestParameters: PaymentsApiGetAccountOwnerDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountOwner> {
            return localVarFp.getAccountOwnerDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account Owner Details
         * @param {PaymentsApiGetAccountOwnerDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountOwnerDetails_1(requestParameters: PaymentsApiGetAccountOwnerDetails0Request, options?: AxiosRequestConfig): AxiosPromise<AccountOwnerHolders> {
            return localVarFp.getAccountOwnerDetails_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Account ACH Details
         * @param {PaymentsApiGetAchDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchDetails(requestParameters: PaymentsApiGetAchDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ACHDetails> {
            return localVarFp.getAchDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance - Live
         * @param {PaymentsApiGetAvailableBalanceLiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableBalanceLive(requestParameters: PaymentsApiGetAvailableBalanceLiveRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableBalance> {
            return localVarFp.getAvailableBalanceLive(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Available Balance
         * @param {PaymentsApiGetLatestCachedBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestCachedBalance(requestParameters: PaymentsApiGetLatestCachedBalanceRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableBalance> {
            return localVarFp.getLatestCachedBalance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Loan Payment Details
         * @param {PaymentsApiGetLoanPaymentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanPaymentDetails(requestParameters: PaymentsApiGetLoanPaymentDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<LoanPaymentDetails> {
            return localVarFp.getLoanPaymentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccountOwnerDetails operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetAccountOwnerDetailsRequest
 */
export type PaymentsApiGetAccountOwnerDetailsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetAccountOwnerDetails
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetAccountOwnerDetails
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getAccountOwnerDetails_1 operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetAccountOwnerDetails0Request
 */
export type PaymentsApiGetAccountOwnerDetails0Request = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetAccountOwnerDetails0
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetAccountOwnerDetails0
    */
    readonly accountId: string
    
    /**
    * If this parameter is true, Identity Insights data will be returned along with the account owner information
    * @type {boolean}
    * @memberof PaymentsApiGetAccountOwnerDetails0
    */
    readonly withInsights?: boolean
    
}

/**
 * Request parameters for getAchDetails operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetAchDetailsRequest
 */
export type PaymentsApiGetAchDetailsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetAchDetails
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetAchDetails
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getAvailableBalanceLive operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetAvailableBalanceLiveRequest
 */
export type PaymentsApiGetAvailableBalanceLiveRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetAvailableBalanceLive
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetAvailableBalanceLive
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getLatestCachedBalance operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetLatestCachedBalanceRequest
 */
export type PaymentsApiGetLatestCachedBalanceRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetLatestCachedBalance
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetLatestCachedBalance
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getLoanPaymentDetails operation in PaymentsApi.
 * @export
 * @interface PaymentsApiGetLoanPaymentDetailsRequest
 */
export type PaymentsApiGetLoanPaymentDetailsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PaymentsApiGetLoanPaymentDetails
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof PaymentsApiGetLoanPaymentDetails
    */
    readonly accountId: string
    
}

/**
 * PaymentsApiGenerated - object-oriented interface
 * @export
 * @class PaymentsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentsApiGenerated extends BaseAPI {
    /**
     * Retrieve the names and addresses of the account owner from a financial institution.  Note: this is a premium service, billable per every successful API call.  This service retrieves account data from the institution. This usually returns quickly, but in some scenarios may take a few minutes to complete. In the event of a timeout condition, retry the call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Account Owner
     * @param {PaymentsApiGetAccountOwnerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getAccountOwnerDetails(requestParameters: PaymentsApiGetAccountOwnerDetailsRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getAccountOwnerDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This service retrieves the account details for an account holder from an institution. The following data objects are available.  * Account holders  * Addresses  * Emails  * Phones  * Documentations  * Identity Insights   Note: The data returned varies from institution to institution as not all of them make the same data available. This is a premium service, billable per each successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Account Owner Details
     * @param {PaymentsApiGetAccountOwnerDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getAccountOwnerDetails_1(requestParameters: PaymentsApiGetAccountOwnerDetails0Request, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getAccountOwnerDetails_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the real account number and routing number details for an ACH payment.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Account ACH Details
     * @param {PaymentsApiGetAchDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getAchDetails(requestParameters: PaymentsApiGetAchDetailsRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getAchDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the available and cleared account balances for a single account in real-time directly from a financial institution.  Note: this is a premium service, billable per every successful API call.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Available Balance - Live
     * @param {PaymentsApiGetAvailableBalanceLiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getAvailableBalanceLive(requestParameters: PaymentsApiGetAvailableBalanceLiveRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getAvailableBalanceLive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the latest cached available and cleared account balances for a customer. Since we update and store balances throughout the day, this is the most accurate balance information available when a connection to a financial institution is unavailable or when a faster response is needed. Only deposit account types are supported: Checking, Savings, Money Market, and CD.  Note: this is a premium service, billable per every successful API call. Enrollment is required.  _Supported account types_: \"checking\", \"savings\", \"moneyMarket\", \"cd\"  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Available Balance
     * @param {PaymentsApiGetLatestCachedBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getLatestCachedBalance(requestParameters: PaymentsApiGetLatestCachedBalanceRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getLatestCachedBalance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the loan payment details of the customer for a loan-type account.  Note: this is a premium service, billable per every successful API call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Loan Payment Details
     * @param {PaymentsApiGetLoanPaymentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public getLoanPaymentDetails(requestParameters: PaymentsApiGetLoanPaymentDetailsRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).getLoanPaymentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
