/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { PortfolioSummary } from '../models';
// @ts-ignore
import { PortfolioWithConsumerSummary } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfoliosApi - axios parameter creator
 * @export
 */
export const PortfoliosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a portfolio of most recently generated reports for each report type for the given customer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png) 
         * @summary Get Portfolio by Customer
         * @param {string} customerId A customer ID
         * @param {string} portfolioId A portfolio ID with the portfolio version number. Using the portfolio number without a version number will return the most recently generated reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostRecentReports: async (customerId: string, portfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getMostRecentReports', 'customerId', customerId)
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getMostRecentReports', 'portfolioId', portfolioId)
            const localVarPath = `/decisioning/v1/customers/{customerId}/portfolios/{portfolioId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolioId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/customers/{customerId}/portfolios/{portfolioId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a portfolio of most recently generated reports for each report type for a given consumer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Portfolio by Consumer
         * @param {string} consumerId The consumer ID
         * @param {string} portfolioId A portfolio ID with the portfolio version number. Using the portfolio number without a version number will return the most recently generated reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioByConsumer: async (consumerId: string, portfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            assertParamExists('getPortfolioByConsumer', 'consumerId', consumerId)
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('getPortfolioByConsumer', 'portfolioId', portfolioId)
            const localVarPath = `/decisioning/v1/consumers/{consumerId}/portfolios/{portfolioId}`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId !== undefined ? consumerId : `-consumerId-`)))
                .replace(`{${"portfolioId"}}`, encodeURIComponent(String(portfolioId !== undefined ? portfolioId : `-portfolioId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/consumers/{consumerId}/portfolios/{portfolioId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosApi - functional programming interface
 * @export
 */
export const PortfoliosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a portfolio of most recently generated reports for each report type for the given customer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png) 
         * @summary Get Portfolio by Customer
         * @param {PortfoliosApiGetMostRecentReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostRecentReports(requestParameters: PortfoliosApiGetMostRecentReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostRecentReports(requestParameters.customerId, requestParameters.portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a portfolio of most recently generated reports for each report type for a given consumer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Portfolio by Consumer
         * @param {PortfoliosApiGetPortfolioByConsumerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortfolioByConsumer(requestParameters: PortfoliosApiGetPortfolioByConsumerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioWithConsumerSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortfolioByConsumer(requestParameters.consumerId, requestParameters.portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfoliosApi - factory interface
 * @export
 */
export const PortfoliosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosApiFp(configuration)
    return {
        /**
         * Return a portfolio of most recently generated reports for each report type for the given customer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png) 
         * @summary Get Portfolio by Customer
         * @param {PortfoliosApiGetMostRecentReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostRecentReports(requestParameters: PortfoliosApiGetMostRecentReportsRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioSummary> {
            return localVarFp.getMostRecentReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a portfolio of most recently generated reports for each report type for a given consumer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Portfolio by Consumer
         * @param {PortfoliosApiGetPortfolioByConsumerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortfolioByConsumer(requestParameters: PortfoliosApiGetPortfolioByConsumerRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioWithConsumerSummary> {
            return localVarFp.getPortfolioByConsumer(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMostRecentReports operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiGetMostRecentReportsRequest
 */
export type PortfoliosApiGetMostRecentReportsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof PortfoliosApiGetMostRecentReports
    */
    readonly customerId: string
    
    /**
    * A portfolio ID with the portfolio version number. Using the portfolio number without a version number will return the most recently generated reports.
    * @type {string}
    * @memberof PortfoliosApiGetMostRecentReports
    */
    readonly portfolioId: string
    
}

/**
 * Request parameters for getPortfolioByConsumer operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiGetPortfolioByConsumerRequest
 */
export type PortfoliosApiGetPortfolioByConsumerRequest = {
    
    /**
    * The consumer ID
    * @type {string}
    * @memberof PortfoliosApiGetPortfolioByConsumer
    */
    readonly consumerId: string
    
    /**
    * A portfolio ID with the portfolio version number. Using the portfolio number without a version number will return the most recently generated reports.
    * @type {string}
    * @memberof PortfoliosApiGetPortfolioByConsumer
    */
    readonly portfolioId: string
    
}

/**
 * PortfoliosApiGenerated - object-oriented interface
 * @export
 * @class PortfoliosApiGenerated
 * @extends {BaseAPI}
 */
export class PortfoliosApiGenerated extends BaseAPI {
    /**
     * Return a portfolio of most recently generated reports for each report type for the given customer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png) 
     * @summary Get Portfolio by Customer
     * @param {PortfoliosApiGetMostRecentReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public getMostRecentReports(requestParameters: PortfoliosApiGetMostRecentReportsRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getMostRecentReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a portfolio of most recently generated reports for each report type for a given consumer. If there are multiple reports that were generated for a report type (VOA, VOI, etc.), only the most recently generated report for the type will be returned.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Portfolio by Consumer
     * @param {PortfoliosApiGetPortfolioByConsumerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public getPortfolioByConsumer(requestParameters: PortfoliosApiGetPortfolioByConsumerRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getPortfolioByConsumer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
