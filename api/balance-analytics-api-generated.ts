/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsReportAck } from '../models';
// @ts-ignore
import { AnalyticsReportConstraints } from '../models';
// @ts-ignore
import { AnalyticsReportData } from '../models';
// @ts-ignore
import { BalanceAndCashFlowAnalyticsReportConstraints } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { ObbAnalyticsReport } from '../models';
// @ts-ignore
import { ObbAnalyticsReportAck } from '../models';
// @ts-ignore
import { ObbErrorMessage } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BalanceAnalyticsApi - axios parameter creator
 * @export
 */
export const BalanceAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for piloting and integration testing your application with the Balance Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Balance Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report_ (operation: _GetObbAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics
         * @param {string} customerId A customer ID
         * @param {BalanceAndCashFlowAnalyticsReportConstraints} balanceAndCashFlowAnalyticsReportConstraints 
         * @param {string} [referenceNumber] Partner-provided reference number to correlate reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnalyticsReport: async (customerId: string, balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints, referenceNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateAnalyticsReport', 'customerId', customerId)
            // verify required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is not null or undefined
            assertParamExists('generateAnalyticsReport', 'balanceAndCashFlowAnalyticsReportConstraints', balanceAndCashFlowAnalyticsReportConstraints)
            const localVarPath = `/analytics/balance/v1/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (referenceNumber !== undefined) {
                localVarQueryParameter['reference-number'] = referenceNumber;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceAndCashFlowAnalyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/balance/v1/customer/{customerId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceAndCashFlowAnalyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report - FCRA_ (operation: _GetObbAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics - FCRA
         * @param {string} customerId A customer ID
         * @param {BalanceAndCashFlowAnalyticsReportConstraints} balanceAndCashFlowAnalyticsReportConstraints 
         * @param {string} [referenceNumber] Partner-provided reference number to correlate reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFcraAnalyticsReport: async (customerId: string, balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints, referenceNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateFcraAnalyticsReport', 'customerId', customerId)
            // verify required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is not null or undefined
            assertParamExists('generateFcraAnalyticsReport', 'balanceAndCashFlowAnalyticsReportConstraints', balanceAndCashFlowAnalyticsReportConstraints)
            const localVarPath = `/analytics/balance/v1/customer/{customerId}/fcra`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (referenceNumber !== undefined) {
                localVarQueryParameter['reference-number'] = referenceNumber;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceAndCashFlowAnalyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/balance/v1/customer/{customerId}/fcra',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceAndCashFlowAnalyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics Report - Personal/Business
         * @param {string} customerId A customer ID
         * @param {string} userType UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.
         * @param {AnalyticsReportConstraints} analyticsReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport: async (customerId: string, userType: string, analyticsReportConstraints: AnalyticsReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateReport', 'customerId', customerId)
            // verify required parameter 'userType' is not null or undefined
            assertParamExists('generateReport', 'userType', userType)
            // verify required parameter 'analyticsReportConstraints' is not null or undefined
            assertParamExists('generateReport', 'analyticsReportConstraints', analyticsReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/reports/balance-analytics/userTypes/{userType}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"userType"}}`, encodeURIComponent(String(userType !== undefined ? userType : `-userType-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: analyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/reports/balance-analytics/userTypes/{userType}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(analyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {string} obbReportId Report ID generated and returned by OBB products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData: async (obbReportId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obbReportId' is not null or undefined
            assertParamExists('getReportData', 'obbReportId', obbReportId)
            const localVarPath = `/analytics/data/v1/{obb_report_id}`
                .replace(`{${"obb_report_id"}}`, encodeURIComponent(String(obbReportId !== undefined ? obbReportId : `-obb_report_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/data/v1/{obb_report_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {string} obbReportId Report ID generated and returned by OBB products
         * @param {string} purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataFcra: async (obbReportId: string, purpose: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obbReportId' is not null or undefined
            assertParamExists('getReportDataFcra', 'obbReportId', obbReportId)
            // verify required parameter 'purpose' is not null or undefined
            assertParamExists('getReportDataFcra', 'purpose', purpose)
            const localVarPath = `/analytics/data/v1/{obb_report_id}/fcra`
                .replace(`{${"obb_report_id"}}`, encodeURIComponent(String(obbReportId !== undefined ? obbReportId : `-obb_report_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/data/v1/{obb_report_id}/fcra',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalanceAnalyticsApi - functional programming interface
 * @export
 */
export const BalanceAnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalanceAnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for piloting and integration testing your application with the Balance Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Balance Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report_ (operation: _GetObbAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics
         * @param {BalanceAnalyticsApiGenerateAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateAnalyticsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReportAck>> {
            const balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints = {
                accountIds: requestParameters.accountIds,
                lengthOfReport: requestParameters.lengthOfReport
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateAnalyticsReport(requestParameters.customerId, balanceAndCashFlowAnalyticsReportConstraints, requestParameters.referenceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report - FCRA_ (operation: _GetObbAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics - FCRA
         * @param {BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateFcraAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReportAck>> {
            const balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints = {
                accountIds: requestParameters.accountIds,
                lengthOfReport: requestParameters.lengthOfReport
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateFcraAnalyticsReport(requestParameters.customerId, balanceAndCashFlowAnalyticsReportConstraints, requestParameters.referenceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics Report - Personal/Business
         * @param {BalanceAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReport(requestParameters: BalanceAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsReportAck>> {
            const analyticsReportConstraints: AnalyticsReportConstraints = {
                analyticsReportData: requestParameters.analyticsReportData,
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                fromDate: requestParameters.fromDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReport(requestParameters.customerId, requestParameters.userType, analyticsReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {BalanceAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportData(requestParameters: BalanceAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportData(requestParameters.obbReportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {BalanceAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDataFcra(requestParameters: BalanceAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDataFcra(requestParameters.obbReportId, requestParameters.purpose, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BalanceAnalyticsApi - factory interface
 * @export
 */
export const BalanceAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalanceAnalyticsApiFp(configuration)
    return {
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for piloting and integration testing your application with the Balance Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Balance Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report_ (operation: _GetObbAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics
         * @param {BalanceAnalyticsApiGenerateAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateAnalyticsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReportAck> {
            return localVarFp.generateAnalyticsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report - FCRA_ (operation: _GetObbAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics - FCRA
         * @param {BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFcraAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReportAck> {
            return localVarFp.generateFcraAnalyticsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Balance Analytics Report - Personal/Business
         * @param {BalanceAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport(requestParameters: BalanceAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig): AxiosPromise<AnalyticsReportAck> {
            return localVarFp.generateReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {BalanceAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(requestParameters: BalanceAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReport> {
            return localVarFp.getReportData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {BalanceAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataFcra(requestParameters: BalanceAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReport> {
            return localVarFp.getReportDataFcra(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateAnalyticsReport operation in BalanceAnalyticsApi.
 * @export
 * @interface BalanceAnalyticsApiGenerateAnalyticsReportRequest
 */
export type BalanceAnalyticsApiGenerateAnalyticsReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateAnalyticsReport
    */
    readonly customerId: string
    
    /**
    * Partner-provided reference number to correlate reports.
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateAnalyticsReport
    */
    readonly referenceNumber?: string
    
} & BalanceAndCashFlowAnalyticsReportConstraints

/**
 * Request parameters for generateFcraAnalyticsReport operation in BalanceAnalyticsApi.
 * @export
 * @interface BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest
 */
export type BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateFcraAnalyticsReport
    */
    readonly customerId: string
    
    /**
    * Partner-provided reference number to correlate reports.
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateFcraAnalyticsReport
    */
    readonly referenceNumber?: string
    
} & BalanceAndCashFlowAnalyticsReportConstraints

/**
 * Request parameters for generateReport operation in BalanceAnalyticsApi.
 * @export
 * @interface BalanceAnalyticsApiGenerateReportRequest
 */
export type BalanceAnalyticsApiGenerateReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateReport
    */
    readonly customerId: string
    
    /**
    * UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateReport
    */
    readonly userType: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof BalanceAnalyticsApiGenerateReport
    */
    readonly callbackUrl?: string
    
} & AnalyticsReportConstraints

/**
 * Request parameters for getReportData operation in BalanceAnalyticsApi.
 * @export
 * @interface BalanceAnalyticsApiGetReportDataRequest
 */
export type BalanceAnalyticsApiGetReportDataRequest = {
    
    /**
    * Report ID generated and returned by OBB products
    * @type {string}
    * @memberof BalanceAnalyticsApiGetReportData
    */
    readonly obbReportId: string
    
}

/**
 * Request parameters for getReportDataFcra operation in BalanceAnalyticsApi.
 * @export
 * @interface BalanceAnalyticsApiGetReportDataFcraRequest
 */
export type BalanceAnalyticsApiGetReportDataFcraRequest = {
    
    /**
    * Report ID generated and returned by OBB products
    * @type {string}
    * @memberof BalanceAnalyticsApiGetReportDataFcra
    */
    readonly obbReportId: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof BalanceAnalyticsApiGetReportDataFcra
    */
    readonly purpose: string
    
}

/**
 * BalanceAnalyticsApiGenerated - object-oriented interface
 * @export
 * @class BalanceAnalyticsApiGenerated
 * @extends {BaseAPI}
 */
export class BalanceAnalyticsApiGenerated extends BaseAPI {
    /**
     * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for piloting and integration testing your application with the Balance Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Balance Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report_ (operation: _GetObbAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Balance Analytics
     * @param {BalanceAnalyticsApiGenerateAnalyticsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceAnalyticsApiGenerated
     */
    public generateAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateAnalyticsReportRequest, options?: AxiosRequestConfig) {
        return BalanceAnalyticsApiFp(this.configuration).generateAnalyticsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer\'s account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report - FCRA_ (operation: _GetObbAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Balance Analytics - FCRA
     * @param {BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceAnalyticsApiGenerated
     */
    public generateFcraAnalyticsReport(requestParameters: BalanceAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig) {
        return BalanceAnalyticsApiFp(this.configuration).generateFcraAnalyticsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a Balance Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Balance  Analytics analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Balance Analytics Report - Personal/Business
     * @param {BalanceAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceAnalyticsApiGenerated
     */
    public generateReport(requestParameters: BalanceAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig) {
        return BalanceAnalyticsApiFp(this.configuration).generateReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get OBB Analytics Report
     * @param {BalanceAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceAnalyticsApiGenerated
     */
    public getReportData(requestParameters: BalanceAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig) {
        return BalanceAnalyticsApiFp(this.configuration).getReportData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get OBB Analytics Report - FCRA
     * @param {BalanceAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceAnalyticsApiGenerated
     */
    public getReportDataFcra(requestParameters: BalanceAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig) {
        return BalanceAnalyticsApiFp(this.configuration).getReportDataFcra(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
