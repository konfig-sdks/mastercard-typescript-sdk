/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Borrower } from '../models';
// @ts-ignore
import { ConnectEmailParameters } from '../models';
// @ts-ignore
import { ConnectEmailUrl } from '../models';
// @ts-ignore
import { ConnectJointBorrowerEmailParameters } from '../models';
// @ts-ignore
import { ConnectJointBorrowerParameters } from '../models';
// @ts-ignore
import { ConnectParameters } from '../models';
// @ts-ignore
import { ConnectUrl } from '../models';
// @ts-ignore
import { ConsumerInfo } from '../models';
// @ts-ignore
import { EmailOptions } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { FixConnectParameters } from '../models';
// @ts-ignore
import { LiteConnectParameters } from '../models';
// @ts-ignore
import { MicroEntryVerifyRequestParameter } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectApi - axios parameter creator
 * @export
 */
export const ConnectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Fix Connect URL
         * @param {FixConnectParameters} fixConnectParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixUrlGeneration: async (fixConnectParameters: FixConnectParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fixConnectParameters' is not null or undefined
            assertParamExists('fixUrlGeneration', 'fixConnectParameters', fixConnectParameters)
            const localVarPath = `/connect/v2/generate/fix`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: fixConnectParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/generate/fix',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(fixConnectParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL - Joint Borrower
         * @param {ConnectJointBorrowerParameters} connectJointBorrowerParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateJointBorrowerUrl: async (connectJointBorrowerParameters: ConnectJointBorrowerParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectJointBorrowerParameters' is not null or undefined
            assertParamExists('generateJointBorrowerUrl', 'connectJointBorrowerParameters', connectJointBorrowerParameters)
            const localVarPath = `/connect/v2/generate/jointBorrower`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectJointBorrowerParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/generate/jointBorrower',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectJointBorrowerParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Lite Connect URL
         * @param {LiteConnectParameters} liteConnectParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLiteUrl: async (liteConnectParameters: LiteConnectParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'liteConnectParameters' is not null or undefined
            assertParamExists('generateLiteUrl', 'liteConnectParameters', liteConnectParameters)
            const localVarPath = `/connect/v2/generate/lite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: liteConnectParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/generate/lite',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(liteConnectParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL
         * @param {ConnectParameters} connectParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUrl: async (connectParameters: ConnectParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectParameters' is not null or undefined
            assertParamExists('generateUrl', 'connectParameters', connectParameters)
            const localVarPath = `/connect/v2/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/generate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email
         * @param {ConnectEmailParameters} connectEmailParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConnectEmail: async (connectEmailParameters: ConnectEmailParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectEmailParameters' is not null or undefined
            assertParamExists('sendConnectEmail', 'connectEmailParameters', connectEmailParameters)
            const localVarPath = `/connect/v2/send/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectEmailParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/send/email',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectEmailParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email - Joint Borrower
         * @param {ConnectJointBorrowerEmailParameters} connectJointBorrowerEmailParameters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailJointBorrower: async (connectJointBorrowerEmailParameters: ConnectJointBorrowerEmailParameters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'connectJointBorrowerEmailParameters' is not null or undefined
            assertParamExists('sendEmailJointBorrower', 'connectJointBorrowerEmailParameters', connectJointBorrowerEmailParameters)
            const localVarPath = `/connect/v2/send/email/jointBorrower`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectJointBorrowerEmailParameters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/send/email/jointBorrower',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectJointBorrowerEmailParameters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Account Validation Assistant User verification of microdeposits
         * @param {MicroEntryVerifyRequestParameter} microEntryVerifyRequestParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroEntryMicrodeposits: async (microEntryVerifyRequestParameter: MicroEntryVerifyRequestParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'microEntryVerifyRequestParameter' is not null or undefined
            assertParamExists('verifyMicroEntryMicrodeposits', 'microEntryVerifyRequestParameter', microEntryVerifyRequestParameter)
            const localVarPath = `/connect/v2/generate/microentry/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: microEntryVerifyRequestParameter,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connect/v2/generate/microentry/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(microEntryVerifyRequestParameter, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectApi - functional programming interface
 * @export
 */
export const ConnectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectApiAxiosParamCreator(configuration)
    return {
        /**
         * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Fix Connect URL
         * @param {ConnectApiFixUrlGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fixUrlGeneration(requestParameters: ConnectApiFixUrlGenerationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectUrl>> {
            const fixConnectParameters: FixConnectParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                customerId: requestParameters.customerId,
                institutionLoginId: requestParameters.institutionLoginId,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                experience: requestParameters.experience,
                singleUseUrl: requestParameters.singleUseUrl,
                isWebView: requestParameters.isWebView
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.fixUrlGeneration(fixConnectParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL - Joint Borrower
         * @param {ConnectApiGenerateJointBorrowerUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateJointBorrowerUrl(requestParameters: ConnectApiGenerateJointBorrowerUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectUrl>> {
            const connectJointBorrowerParameters: ConnectJointBorrowerParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                borrowers: requestParameters.borrowers,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                institutionSettings: requestParameters.institutionSettings,
                experience: requestParameters.experience,
                fromDate: requestParameters.fromDate,
                reportCustomFields: requestParameters.reportCustomFields,
                singleUseUrl: requestParameters.singleUseUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateJointBorrowerUrl(connectJointBorrowerParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Lite Connect URL
         * @param {ConnectApiGenerateLiteUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateLiteUrl(requestParameters: ConnectApiGenerateLiteUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectUrl>> {
            const liteConnectParameters: LiteConnectParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                customerId: requestParameters.customerId,
                institutionId: requestParameters.institutionId,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                experience: requestParameters.experience,
                singleUseUrl: requestParameters.singleUseUrl,
                isWebView: requestParameters.isWebView
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateLiteUrl(liteConnectParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL
         * @param {ConnectApiGenerateUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateUrl(requestParameters: ConnectApiGenerateUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectUrl>> {
            const connectParameters: ConnectParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                customerId: requestParameters.customerId,
                consumerId: requestParameters.consumerId,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                optionalConsumerInfo: requestParameters.optionalConsumerInfo,
                singleUseUrl: requestParameters.singleUseUrl,
                experience: requestParameters.experience,
                institutionSettings: requestParameters.institutionSettings,
                fromDate: requestParameters.fromDate,
                reportCustomFields: requestParameters.reportCustomFields,
                isWebView: requestParameters.isWebView
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateUrl(connectParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email
         * @param {ConnectApiSendConnectEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendConnectEmail(requestParameters: ConnectApiSendConnectEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectEmailUrl>> {
            const connectEmailParameters: ConnectEmailParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                customerId: requestParameters.customerId,
                consumerId: requestParameters.consumerId,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                institutionSettings: requestParameters.institutionSettings,
                email: requestParameters.email,
                experience: requestParameters.experience,
                singleUseUrl: requestParameters.singleUseUrl,
                fromDate: requestParameters.fromDate,
                reportCustomFields: requestParameters.reportCustomFields,
                optionalConsumerInfo: requestParameters.optionalConsumerInfo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendConnectEmail(connectEmailParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email - Joint Borrower
         * @param {ConnectApiSendEmailJointBorrowerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendEmailJointBorrower(requestParameters: ConnectApiSendEmailJointBorrowerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectEmailUrl>> {
            const connectJointBorrowerEmailParameters: ConnectJointBorrowerEmailParameters = {
                language: requestParameters.language,
                partnerId: requestParameters.partnerId,
                borrowers: requestParameters.borrowers,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                institutionSettings: requestParameters.institutionSettings,
                email: requestParameters.email,
                experience: requestParameters.experience,
                fromDate: requestParameters.fromDate,
                reportCustomFields: requestParameters.reportCustomFields,
                singleUseUrl: requestParameters.singleUseUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmailJointBorrower(connectJointBorrowerEmailParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Account Validation Assistant User verification of microdeposits
         * @param {ConnectApiVerifyMicroEntryMicrodepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMicroEntryMicrodeposits(requestParameters: ConnectApiVerifyMicroEntryMicrodepositsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectUrl>> {
            const microEntryVerifyRequestParameter: MicroEntryVerifyRequestParameter = {
                partnerId: requestParameters.partnerId,
                customerId: requestParameters.customerId,
                redirectUri: requestParameters.redirectUri,
                webhook: requestParameters.webhook,
                webhookContentType: requestParameters.webhookContentType,
                webhookData: requestParameters.webhookData,
                webhookHeaders: requestParameters.webhookHeaders,
                experience: requestParameters.experience,
                accountId: requestParameters.accountId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMicroEntryMicrodeposits(microEntryVerifyRequestParameter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectApi - factory interface
 * @export
 */
export const ConnectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectApiFp(configuration)
    return {
        /**
         * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Fix Connect URL
         * @param {ConnectApiFixUrlGenerationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fixUrlGeneration(requestParameters: ConnectApiFixUrlGenerationRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectUrl> {
            return localVarFp.fixUrlGeneration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL - Joint Borrower
         * @param {ConnectApiGenerateJointBorrowerUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateJointBorrowerUrl(requestParameters: ConnectApiGenerateJointBorrowerUrlRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectUrl> {
            return localVarFp.generateJointBorrowerUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Lite Connect URL
         * @param {ConnectApiGenerateLiteUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateLiteUrl(requestParameters: ConnectApiGenerateLiteUrlRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectUrl> {
            return localVarFp.generateLiteUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Connect URL
         * @param {ConnectApiGenerateUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateUrl(requestParameters: ConnectApiGenerateUrlRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectUrl> {
            return localVarFp.generateUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email
         * @param {ConnectApiSendConnectEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendConnectEmail(requestParameters: ConnectApiSendConnectEmailRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectEmailUrl> {
            return localVarFp.sendConnectEmail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Send Connect Email - Joint Borrower
         * @param {ConnectApiSendEmailJointBorrowerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendEmailJointBorrower(requestParameters: ConnectApiSendEmailJointBorrowerRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectEmailUrl> {
            return localVarFp.sendEmailJointBorrower(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Account Validation Assistant User verification of microdeposits
         * @param {ConnectApiVerifyMicroEntryMicrodepositsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroEntryMicrodeposits(requestParameters: ConnectApiVerifyMicroEntryMicrodepositsRequest, options?: AxiosRequestConfig): AxiosPromise<ConnectUrl> {
            return localVarFp.verifyMicroEntryMicrodeposits(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fixUrlGeneration operation in ConnectApi.
 * @export
 * @interface ConnectApiFixUrlGenerationRequest
 */
export type ConnectApiFixUrlGenerationRequest = {
    
} & FixConnectParameters

/**
 * Request parameters for generateJointBorrowerUrl operation in ConnectApi.
 * @export
 * @interface ConnectApiGenerateJointBorrowerUrlRequest
 */
export type ConnectApiGenerateJointBorrowerUrlRequest = {
    
} & ConnectJointBorrowerParameters

/**
 * Request parameters for generateLiteUrl operation in ConnectApi.
 * @export
 * @interface ConnectApiGenerateLiteUrlRequest
 */
export type ConnectApiGenerateLiteUrlRequest = {
    
} & LiteConnectParameters

/**
 * Request parameters for generateUrl operation in ConnectApi.
 * @export
 * @interface ConnectApiGenerateUrlRequest
 */
export type ConnectApiGenerateUrlRequest = {
    
} & ConnectParameters

/**
 * Request parameters for sendConnectEmail operation in ConnectApi.
 * @export
 * @interface ConnectApiSendConnectEmailRequest
 */
export type ConnectApiSendConnectEmailRequest = {
    
} & ConnectEmailParameters

/**
 * Request parameters for sendEmailJointBorrower operation in ConnectApi.
 * @export
 * @interface ConnectApiSendEmailJointBorrowerRequest
 */
export type ConnectApiSendEmailJointBorrowerRequest = {
    
} & ConnectJointBorrowerEmailParameters

/**
 * Request parameters for verifyMicroEntryMicrodeposits operation in ConnectApi.
 * @export
 * @interface ConnectApiVerifyMicroEntryMicrodepositsRequest
 */
export type ConnectApiVerifyMicroEntryMicrodepositsRequest = {
    
} & MicroEntryVerifyRequestParameter

/**
 * ConnectApiGenerated - object-oriented interface
 * @export
 * @class ConnectApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectApiGenerated extends BaseAPI {
    /**
     * Use the Connect Fix API when the following conditions occur: * The connection to the user\'s financial institution is lost * The user\'s credentials were updated (for any number of reasons) * The user\'s MFA challenge has expired  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Fix Connect URL
     * @param {ConnectApiFixUrlGenerationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public fixUrlGeneration(requestParameters: ConnectApiFixUrlGenerationRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).fixUrlGeneration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Connect URL - Joint Borrower
     * @param {ConnectApiGenerateJointBorrowerUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public generateJointBorrowerUrl(requestParameters: ConnectApiGenerateJointBorrowerUrlRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).generateJointBorrowerUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user\'s credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn\'t a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Lite Connect URL
     * @param {ConnectApiGenerateLiteUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public generateLiteUrl(requestParameters: ConnectApiGenerateLiteUrlRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).generateLiteUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a Connect 2.0 URL link to add within your own applications.  Optional Parameters: * `experience`: Configure different customer experiences per Connect session by changing the brand, color, logo, icon, the type of credit decisioning report to generate after the session ends, and more. * `language`: By default, the Connect application is in English. You don\'t need to pass  this parameter unless you want to translate Connect into one of our supported languages.    * Spanish (United States)   * French (Canada)   MVS Developers: You can pre-populate the consumer\'s SSN on the Find employment records page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Connect URL
     * @param {ConnectApiGenerateUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public generateUrl(requestParameters: ConnectApiGenerateUrlRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).generateUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Send Connect Email
     * @param {ConnectApiSendConnectEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public sendConnectEmail(requestParameters: ConnectApiSendConnectEmailRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).sendConnectEmail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower\'s email addresses.  When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Send Connect Email - Joint Borrower
     * @param {ConnectApiSendEmailJointBorrowerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public sendEmailJointBorrower(requestParameters: ConnectApiSendEmailJointBorrowerRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).sendEmailJointBorrower(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Account Validation Assistant User verification of microdeposits
     * @param {ConnectApiVerifyMicroEntryMicrodepositsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectApiGenerated
     */
    public verifyMicroEntryMicrodeposits(requestParameters: ConnectApiVerifyMicroEntryMicrodepositsRequest, options?: AxiosRequestConfig) {
        return ConnectApiFp(this.configuration).verifyMicroEntryMicrodeposits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
