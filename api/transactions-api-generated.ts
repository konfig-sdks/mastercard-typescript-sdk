/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
// @ts-ignore
import { Transaction } from '../models';
// @ts-ignore
import { Transactions } from '../models';
// @ts-ignore
import { TransactionsReportAck } from '../models';
// @ts-ignore
import { TransactionsReportConstraints } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.  This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  There cannot be more than 24 months between `fromDate` and `toDate`.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Transactions Report
         * @param {string} customerId A customer ID
         * @param {number} toDate A end date
         * @param {TransactionsReportConstraints} transactionsReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {boolean} [includePending] If pending transactions must be included
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get24MonthsHistoryAndGenerateReport: async (customerId: string, toDate: number, transactionsReportConstraints: TransactionsReportConstraints, callbackUrl?: string, includePending?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('get24MonthsHistoryAndGenerateReport', 'customerId', customerId)
            // verify required parameter 'toDate' is not null or undefined
            assertParamExists('get24MonthsHistoryAndGenerateReport', 'toDate', toDate)
            // verify required parameter 'transactionsReportConstraints' is not null or undefined
            assertParamExists('get24MonthsHistoryAndGenerateReport', 'transactionsReportConstraints', transactionsReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/transactions`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (includePending !== undefined) {
                localVarQueryParameter['includePending'] = includePending;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transactionsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/transactions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transactionsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all transactions available for this customer within the given date range, across all accounts. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get All Customer Transactions
         * @param {string} customerId A customer ID
         * @param {number} fromDate A start date
         * @param {number} toDate A end date
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {string} [sort] Date sort order: \&quot;asc\&quot; for ascending, \&quot;desc\&quot; for descending
         * @param {boolean} [includePending] If pending transactions must be included
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomerTransactions: async (customerId: string, fromDate: number, toDate: number, start?: number, limit?: number, sort?: string, includePending?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAllCustomerTransactions', 'customerId', customerId)
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getAllCustomerTransactions', 'fromDate', fromDate)
            // verify required parameter 'toDate' is not null or undefined
            assertParamExists('getAllCustomerTransactions', 'toDate', toDate)
            const localVarPath = `/aggregation/v3/customers/{customerId}/transactions`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (includePending !== undefined) {
                localVarQueryParameter['includePending'] = includePending;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v3/customers/{customerId}/transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for the given transaction.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Transaction by ID
         * @param {string} customerId A customer ID
         * @param {number} transactionId A transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (customerId: string, transactionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getById', 'customerId', customerId)
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getById', 'transactionId', transactionId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/transactions/{transactionId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/transactions/{transactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all transactions available for this customer account within the given date range. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the Cash Flow Verification service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Transactions
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {number} fromDate A start date
         * @param {number} toDate A end date
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {string} [sort] Date sort order: \&quot;asc\&quot; for ascending, \&quot;desc\&quot; for descending
         * @param {boolean} [includePending] If pending transactions must be included
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccountTransactions: async (customerId: string, accountId: string, fromDate: number, toDate: number, start?: number, limit?: number, sort?: string, includePending?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerAccountTransactions', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCustomerAccountTransactions', 'accountId', accountId)
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getCustomerAccountTransactions', 'fromDate', fromDate)
            // verify required parameter 'toDate' is not null or undefined
            assertParamExists('getCustomerAccountTransactions', 'toDate', toDate)
            const localVarPath = `/aggregation/v4/customers/{customerId}/accounts/{accountId}/transactions`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (includePending !== undefined) {
                localVarQueryParameter['includePending'] = includePending;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v4/customers/{customerId}/accounts/{accountId}/transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect to the account\'s financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.  This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)  The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  The date range sent to the institution is calculated from the account\'s `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.  In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:  * The institution\'s policy has changed, making more transactions available * Finicity has now added a longer transaction history support for the institution * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team  In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Load Historic Transactions for Customer Account
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadHistoricTransactionsForCustomerAccount: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('loadHistoricTransactionsForCustomerAccount', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('loadHistoricTransactionsForCustomerAccount', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/transactions/historic`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/transactions/historic',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.  This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  There cannot be more than 24 months between `fromDate` and `toDate`.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Transactions Report
         * @param {TransactionsApiGet24MonthsHistoryAndGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get24MonthsHistoryAndGenerateReport(requestParameters: TransactionsApiGet24MonthsHistoryAndGenerateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionsReportAck>> {
            const transactionsReportConstraints: TransactionsReportConstraints = {
                accountIds: requestParameters.accountIds,
                fromDate: requestParameters.fromDate,
                reportCustomFields: requestParameters.reportCustomFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.get24MonthsHistoryAndGenerateReport(requestParameters.customerId, requestParameters.toDate, transactionsReportConstraints, requestParameters.callbackUrl, requestParameters.includePending, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all transactions available for this customer within the given date range, across all accounts. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get All Customer Transactions
         * @param {TransactionsApiGetAllCustomerTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCustomerTransactions(requestParameters: TransactionsApiGetAllCustomerTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCustomerTransactions(requestParameters.customerId, requestParameters.fromDate, requestParameters.toDate, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.includePending, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for the given transaction.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Transaction by ID
         * @param {TransactionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TransactionsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.customerId, requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all transactions available for this customer account within the given date range. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the Cash Flow Verification service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Transactions
         * @param {TransactionsApiGetCustomerAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAccountTransactions(requestParameters: TransactionsApiGetCustomerAccountTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerAccountTransactions(requestParameters.customerId, requestParameters.accountId, requestParameters.fromDate, requestParameters.toDate, requestParameters.start, requestParameters.limit, requestParameters.sort, requestParameters.includePending, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Connect to the account\'s financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.  This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)  The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  The date range sent to the institution is calculated from the account\'s `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.  In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:  * The institution\'s policy has changed, making more transactions available * Finicity has now added a longer transaction history support for the institution * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team  In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Load Historic Transactions for Customer Account
         * @param {TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loadHistoricTransactionsForCustomerAccount(requestParameters: TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loadHistoricTransactionsForCustomerAccount(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.  This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  There cannot be more than 24 months between `fromDate` and `toDate`.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Transactions Report
         * @param {TransactionsApiGet24MonthsHistoryAndGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get24MonthsHistoryAndGenerateReport(requestParameters: TransactionsApiGet24MonthsHistoryAndGenerateReportRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionsReportAck> {
            return localVarFp.get24MonthsHistoryAndGenerateReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all transactions available for this customer within the given date range, across all accounts. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get All Customer Transactions
         * @param {TransactionsApiGetAllCustomerTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCustomerTransactions(requestParameters: TransactionsApiGetAllCustomerTransactionsRequest, options?: AxiosRequestConfig): AxiosPromise<Transactions> {
            return localVarFp.getAllCustomerTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for the given transaction.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Transaction by ID
         * @param {TransactionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TransactionsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all transactions available for this customer account within the given date range. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the Cash Flow Verification service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Transactions
         * @param {TransactionsApiGetCustomerAccountTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccountTransactions(requestParameters: TransactionsApiGetCustomerAccountTransactionsRequest, options?: AxiosRequestConfig): AxiosPromise<Transactions> {
            return localVarFp.getCustomerAccountTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect to the account\'s financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.  This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)  The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  The date range sent to the institution is calculated from the account\'s `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.  In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:  * The institution\'s policy has changed, making more transactions available * Finicity has now added a longer transaction history support for the institution * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team  In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Load Historic Transactions for Customer Account
         * @param {TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loadHistoricTransactionsForCustomerAccount(requestParameters: TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.loadHistoricTransactionsForCustomerAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get24MonthsHistoryAndGenerateReport operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGet24MonthsHistoryAndGenerateReportRequest
 */
export type TransactionsApiGet24MonthsHistoryAndGenerateReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof TransactionsApiGet24MonthsHistoryAndGenerateReport
    */
    readonly customerId: string
    
    /**
    * A end date
    * @type {number}
    * @memberof TransactionsApiGet24MonthsHistoryAndGenerateReport
    */
    readonly toDate: number
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof TransactionsApiGet24MonthsHistoryAndGenerateReport
    */
    readonly callbackUrl?: string
    
    /**
    * If pending transactions must be included
    * @type {boolean}
    * @memberof TransactionsApiGet24MonthsHistoryAndGenerateReport
    */
    readonly includePending?: boolean
    
} & TransactionsReportConstraints

/**
 * Request parameters for getAllCustomerTransactions operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetAllCustomerTransactionsRequest
 */
export type TransactionsApiGetAllCustomerTransactionsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly customerId: string
    
    /**
    * A start date
    * @type {number}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly fromDate: number
    
    /**
    * A end date
    * @type {number}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly toDate: number
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly limit?: number
    
    /**
    * Date sort order: \"asc\" for ascending, \"desc\" for descending
    * @type {string}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly sort?: string
    
    /**
    * If pending transactions must be included
    * @type {boolean}
    * @memberof TransactionsApiGetAllCustomerTransactions
    */
    readonly includePending?: boolean
    
}

/**
 * Request parameters for getById operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetByIdRequest
 */
export type TransactionsApiGetByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof TransactionsApiGetById
    */
    readonly customerId: string
    
    /**
    * A transaction ID
    * @type {number}
    * @memberof TransactionsApiGetById
    */
    readonly transactionId: number
    
}

/**
 * Request parameters for getCustomerAccountTransactions operation in TransactionsApi.
 * @export
 * @interface TransactionsApiGetCustomerAccountTransactionsRequest
 */
export type TransactionsApiGetCustomerAccountTransactionsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly accountId: string
    
    /**
    * A start date
    * @type {number}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly fromDate: number
    
    /**
    * A end date
    * @type {number}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly toDate: number
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly limit?: number
    
    /**
    * Date sort order: \"asc\" for ascending, \"desc\" for descending
    * @type {string}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly sort?: string
    
    /**
    * If pending transactions must be included
    * @type {boolean}
    * @memberof TransactionsApiGetCustomerAccountTransactions
    */
    readonly includePending?: boolean
    
}

/**
 * Request parameters for loadHistoricTransactionsForCustomerAccount operation in TransactionsApi.
 * @export
 * @interface TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest
 */
export type TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof TransactionsApiLoadHistoricTransactionsForCustomerAccount
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof TransactionsApiLoadHistoricTransactionsForCustomerAccount
    */
    readonly accountId: string
    
}

/**
 * TransactionsApiGenerated - object-oriented interface
 * @export
 * @class TransactionsApiGenerated
 * @extends {BaseAPI}
 */
export class TransactionsApiGenerated extends BaseAPI {
    /**
     * Generate a Transaction Report for the given accounts under the given customer. This service retrieves up to 24 months of transaction history for the given customer. It then uses this information to generate the Transaction Report.  This is a premium service. A billable event will be created upon the successful generation of the Transactions Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  There cannot be more than 24 months between `fromDate` and `toDate`.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Transactions Report
     * @param {TransactionsApiGet24MonthsHistoryAndGenerateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public get24MonthsHistoryAndGenerateReport(requestParameters: TransactionsApiGet24MonthsHistoryAndGenerateReportRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).get24MonthsHistoryAndGenerateReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all transactions available for this customer within the given date range, across all accounts. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get All Customer Transactions
     * @param {TransactionsApiGetAllCustomerTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public getAllCustomerTransactions(requestParameters: TransactionsApiGetAllCustomerTransactionsRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getAllCustomerTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for the given transaction.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Transaction by ID
     * @param {TransactionsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public getById(requestParameters: TransactionsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all transactions available for this customer account within the given date range. This service supports paging and sorting by `transactionDate` (or `postedDate` if no transaction date is provided), with a maximum of 1000 transactions per request.  Standard consumer aggregation provides up to 180 days of transactions prior to the date each account was added to the Finicity system. To access older transactions, you must first call the Cash Flow Verification service Load Historic Transactions for Account.  There is no limit for the size of the window between `fromDate` and `toDate`, however, the maximum number of transactions returned on one page is 1000.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Account Transactions
     * @param {TransactionsApiGetCustomerAccountTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public getCustomerAccountTransactions(requestParameters: TransactionsApiGetCustomerAccountTransactionsRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getCustomerAccountTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Connect to the account\'s financial institution and load up to 24 months of historic transactions for the account. Length of history varies by institution.  This is a premium service. The billable event is a call to this service specifying a customer ID that has not been seen before by this service. (If this service is called multiple times with the same customer ID, to load transactions from multiple accounts, only one billable event has occurred.)  The recommended timeout setting for this request is 180 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  The date range sent to the institution is calculated from the account\'s `createdDate`. This means that calling this service a second time for the same account normally will not add any new transactions for the account. For this reason, a second call to this service for a known account ID will usually return immediately.  In a few specific scenarios, it may be desirable to force a second connection to the institution for a known account ID. Some examples are:  * The institution\'s policy has changed, making more transactions available * Finicity has now added a longer transaction history support for the institution * The first call encountered an error, and the resulting Aggregation Ticket has now been fixed by the Finicity Support Team  In these cases, the POST request can contain the parameter `force=true` in the request body to force the second connection.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Load Historic Transactions for Customer Account
     * @param {TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiGenerated
     */
    public loadHistoricTransactionsForCustomerAccount(requestParameters: TransactionsApiLoadHistoricTransactionsForCustomerAccountRequest, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).loadHistoricTransactionsForCustomerAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
