/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppStatuses } from '../models';
// @ts-ignore
import { Application } from '../models';
// @ts-ignore
import { CustomerAccounts } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { RegisteredApplication } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppRegistrationApi - axios parameter creator
 * @export
 */
export const AppRegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Set Customer App ID
         * @param {string} customerId A customer ID
         * @param {string} applicationId The application ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignApplications: async (customerId: string, applicationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('assignApplications', 'customerId', customerId)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('assignApplications', 'applicationId', applicationId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/applications/{applicationId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId !== undefined ? applicationId : `-applicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/applications/{applicationId}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Register App
         * @param {Application} application 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication: async (application: Application, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'application' is not null or undefined
            assertParamExists('createNewApplication', 'application', application)
            const localVarPath = `/aggregation/v1/partners/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: application,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/partners/applications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(application, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get App Registration Status
         * @param {string} [preAppId] The application registration tracking ID
         * @param {string} [applicationId] The application ID
         * @param {string} [status] Look up app registration requests by status
         * @param {string} [appName] Look up app registration requests by app name
         * @param {number} [submittedDate] Look up app registration requests by the date they were submitted
         * @param {number} [modifiedDate] Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \&quot;A\&quot; or \&quot;R\&quot;.
         * @param {number} [page] Index of the page of results to return
         * @param {number} [pageSize] Maximum number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationStatus: async (preAppId?: string, applicationId?: string, status?: string, appName?: string, submittedDate?: number, modifiedDate?: number, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aggregation/v2/partners/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (preAppId !== undefined) {
                localVarQueryParameter['preAppId'] = preAppId;
            }

            if (applicationId !== undefined) {
                localVarQueryParameter['applicationId'] = applicationId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (appName !== undefined) {
                localVarQueryParameter['appName'] = appName;
            }

            if (submittedDate !== undefined) {
                localVarQueryParameter['submittedDate'] = submittedDate;
            }

            if (modifiedDate !== undefined) {
                localVarQueryParameter['modifiedDate'] = modifiedDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/partners/applications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Migrate Institution Login Accounts
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateInstitutionLoginAccounts: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('migrateInstitutionLoginAccounts', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('migrateInstitutionLoginAccounts', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify App Registration
         * @param {string} preAppId The application registration tracking ID
         * @param {Application} application 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistration: async (preAppId: string, application: Application, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'preAppId' is not null or undefined
            assertParamExists('updateRegistration', 'preAppId', preAppId)
            // verify required parameter 'application' is not null or undefined
            assertParamExists('updateRegistration', 'application', application)
            const localVarPath = `/aggregation/v1/partners/applications/{preAppId}`
                .replace(`{${"preAppId"}}`, encodeURIComponent(String(preAppId !== undefined ? preAppId : `-preAppId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: application,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/partners/applications/{preAppId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(application, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppRegistrationApi - functional programming interface
 * @export
 */
export const AppRegistrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppRegistrationApiAxiosParamCreator(configuration)
    return {
        /**
         * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Set Customer App ID
         * @param {AppRegistrationApiAssignApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignApplications(requestParameters: AppRegistrationApiAssignApplicationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignApplications(requestParameters.customerId, requestParameters.applicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Register App
         * @param {AppRegistrationApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewApplication(requestParameters: AppRegistrationApiCreateNewApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisteredApplication>> {
            const application: Application = {
                appDescription: requestParameters.appDescription,
                appName: requestParameters.appName,
                appUrl: requestParameters.appUrl,
                ownerAddressLine1: requestParameters.ownerAddressLine1,
                ownerAddressLine2: requestParameters.ownerAddressLine2,
                ownerCity: requestParameters.ownerCity,
                ownerCountry: requestParameters.ownerCountry,
                ownerName: requestParameters.ownerName,
                ownerPostalCode: requestParameters.ownerPostalCode,
                ownerState: requestParameters.ownerState,
                image: requestParameters.image
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewApplication(application, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get App Registration Status
         * @param {AppRegistrationApiGetApplicationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationStatus(requestParameters: AppRegistrationApiGetApplicationStatusRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppStatuses>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationStatus(requestParameters.preAppId, requestParameters.applicationId, requestParameters.status, requestParameters.appName, requestParameters.submittedDate, requestParameters.modifiedDate, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Migrate Institution Login Accounts
         * @param {AppRegistrationApiMigrateInstitutionLoginAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrateInstitutionLoginAccounts(requestParameters: AppRegistrationApiMigrateInstitutionLoginAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrateInstitutionLoginAccounts(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify App Registration
         * @param {AppRegistrationApiUpdateRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistration(requestParameters: AppRegistrationApiUpdateRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisteredApplication>> {
            const application: Application = {
                appDescription: requestParameters.appDescription,
                appName: requestParameters.appName,
                appUrl: requestParameters.appUrl,
                ownerAddressLine1: requestParameters.ownerAddressLine1,
                ownerAddressLine2: requestParameters.ownerAddressLine2,
                ownerCity: requestParameters.ownerCity,
                ownerCountry: requestParameters.ownerCountry,
                ownerName: requestParameters.ownerName,
                ownerPostalCode: requestParameters.ownerPostalCode,
                ownerState: requestParameters.ownerState,
                image: requestParameters.image
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistration(requestParameters.preAppId, application, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppRegistrationApi - factory interface
 * @export
 */
export const AppRegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppRegistrationApiFp(configuration)
    return {
        /**
         * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Set Customer App ID
         * @param {AppRegistrationApiAssignApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignApplications(requestParameters: AppRegistrationApiAssignApplicationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignApplications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Register App
         * @param {AppRegistrationApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication(requestParameters: AppRegistrationApiCreateNewApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<RegisteredApplication> {
            return localVarFp.createNewApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get App Registration Status
         * @param {AppRegistrationApiGetApplicationStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationStatus(requestParameters: AppRegistrationApiGetApplicationStatusRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AppStatuses> {
            return localVarFp.getApplicationStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Migrate Institution Login Accounts
         * @param {AppRegistrationApiMigrateInstitutionLoginAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrateInstitutionLoginAccounts(requestParameters: AppRegistrationApiMigrateInstitutionLoginAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.migrateInstitutionLoginAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify App Registration
         * @param {AppRegistrationApiUpdateRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistration(requestParameters: AppRegistrationApiUpdateRegistrationRequest, options?: AxiosRequestConfig): AxiosPromise<RegisteredApplication> {
            return localVarFp.updateRegistration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignApplications operation in AppRegistrationApi.
 * @export
 * @interface AppRegistrationApiAssignApplicationsRequest
 */
export type AppRegistrationApiAssignApplicationsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AppRegistrationApiAssignApplications
    */
    readonly customerId: string
    
    /**
    * The application ID
    * @type {string}
    * @memberof AppRegistrationApiAssignApplications
    */
    readonly applicationId: string
    
}

/**
 * Request parameters for createNewApplication operation in AppRegistrationApi.
 * @export
 * @interface AppRegistrationApiCreateNewApplicationRequest
 */
export type AppRegistrationApiCreateNewApplicationRequest = {
    
} & Application

/**
 * Request parameters for getApplicationStatus operation in AppRegistrationApi.
 * @export
 * @interface AppRegistrationApiGetApplicationStatusRequest
 */
export type AppRegistrationApiGetApplicationStatusRequest = {
    
    /**
    * The application registration tracking ID
    * @type {string}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly preAppId?: string
    
    /**
    * The application ID
    * @type {string}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly applicationId?: string
    
    /**
    * Look up app registration requests by status
    * @type {string}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly status?: string
    
    /**
    * Look up app registration requests by app name
    * @type {string}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly appName?: string
    
    /**
    * Look up app registration requests by the date they were submitted
    * @type {number}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly submittedDate?: number
    
    /**
    * Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \"A\" or \"R\".
    * @type {number}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly modifiedDate?: number
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly page?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof AppRegistrationApiGetApplicationStatus
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for migrateInstitutionLoginAccounts operation in AppRegistrationApi.
 * @export
 * @interface AppRegistrationApiMigrateInstitutionLoginAccountsRequest
 */
export type AppRegistrationApiMigrateInstitutionLoginAccountsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AppRegistrationApiMigrateInstitutionLoginAccounts
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AppRegistrationApiMigrateInstitutionLoginAccounts
    */
    readonly institutionLoginId: string
    
}

/**
 * Request parameters for updateRegistration operation in AppRegistrationApi.
 * @export
 * @interface AppRegistrationApiUpdateRegistrationRequest
 */
export type AppRegistrationApiUpdateRegistrationRequest = {
    
    /**
    * The application registration tracking ID
    * @type {string}
    * @memberof AppRegistrationApiUpdateRegistration
    */
    readonly preAppId: string
    
} & Application

/**
 * AppRegistrationApiGenerated - object-oriented interface
 * @export
 * @class AppRegistrationApiGenerated
 * @extends {BaseAPI}
 */
export class AppRegistrationApiGenerated extends BaseAPI {
    /**
     * If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Set Customer App ID
     * @param {AppRegistrationApiAssignApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApiGenerated
     */
    public assignApplications(requestParameters: AppRegistrationApiAssignApplicationsRequest, options?: AxiosRequestConfig) {
        return AppRegistrationApiFp(this.configuration).assignApplications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Register App
     * @param {AppRegistrationApiCreateNewApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApiGenerated
     */
    public createNewApplication(requestParameters: AppRegistrationApiCreateNewApplicationRequest, options?: AxiosRequestConfig) {
        return AppRegistrationApiFp(this.configuration).createNewApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the status of your application registration(s).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get App Registration Status
     * @param {AppRegistrationApiGetApplicationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApiGenerated
     */
    public getApplicationStatus(requestParameters: AppRegistrationApiGetApplicationStatusRequest = {}, options?: AxiosRequestConfig) {
        return AppRegistrationApiFp(this.configuration).getApplicationStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The `institutionLoginId` parameter uses Finicity\'s internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Migrate Institution Login Accounts
     * @param {AppRegistrationApiMigrateInstitutionLoginAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApiGenerated
     */
    public migrateInstitutionLoginAccounts(requestParameters: AppRegistrationApiMigrateInstitutionLoginAccountsRequest, options?: AxiosRequestConfig) {
        return AppRegistrationApiFp(this.configuration).migrateInstitutionLoginAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a registered application.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Modify App Registration
     * @param {AppRegistrationApiUpdateRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppRegistrationApiGenerated
     */
    public updateRegistration(requestParameters: AppRegistrationApiUpdateRegistrationRequest, options?: AxiosRequestConfig) {
        return AppRegistrationApiFp(this.configuration).updateRegistration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
