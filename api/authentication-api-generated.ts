/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessToken } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { PartnerCredentials } from '../models';
// @ts-ignore
import { PartnerCredentialsWithNewSecret } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. Contact [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Create Access Token
         * @param {PartnerCredentials} partnerCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken: async (partnerCredentials: PartnerCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCredentials' is not null or undefined
            assertParamExists('createAccessToken', 'partnerCredentials', partnerCredentials)
            const localVarPath = `/aggregation/v2/partners/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: partnerCredentials,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/partners/authentication',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCredentials, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Modify Partner Secret
         * @param {PartnerCredentialsWithNewSecret} partnerCredentialsWithNewSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPartnerSecret: async (partnerCredentialsWithNewSecret: PartnerCredentialsWithNewSecret, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerCredentialsWithNewSecret' is not null or undefined
            assertParamExists('modifyPartnerSecret', 'partnerCredentialsWithNewSecret', partnerCredentialsWithNewSecret)
            const localVarPath = `/aggregation/v2/partners/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: partnerCredentialsWithNewSecret,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/partners/authentication',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(partnerCredentialsWithNewSecret, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. Contact [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Create Access Token
         * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessToken>> {
            const partnerCredentials: PartnerCredentials = {
                partnerId: requestParameters.partnerId,
                partnerSecret: requestParameters.partnerSecret
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessToken(partnerCredentials, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Modify Partner Secret
         * @param {AuthenticationApiModifyPartnerSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyPartnerSecret(requestParameters: AuthenticationApiModifyPartnerSecretRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const partnerCredentialsWithNewSecret: PartnerCredentialsWithNewSecret = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyPartnerSecret(partnerCredentialsWithNewSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. Contact [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Create Access Token
         * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AccessToken> {
            return localVarFp.createAccessToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
         * @summary Modify Partner Secret
         * @param {AuthenticationApiModifyPartnerSecretRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyPartnerSecret(requestParameters: AuthenticationApiModifyPartnerSecretRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyPartnerSecret(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccessToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateAccessTokenRequest
 */
export type AuthenticationApiCreateAccessTokenRequest = {
    
} & PartnerCredentials

/**
 * Request parameters for modifyPartnerSecret operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiModifyPartnerSecretRequest
 */
export type AuthenticationApiModifyPartnerSecretRequest = {
    
} & PartnerCredentialsWithNewSecret

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Send Partner ID and Partner Secret to the Partner Authentication service to obtain a token for accessing Finicity APIs. * The token is valid for two hours and is required on all calls to the Finicity APIs * As a best practice, use a single token for all calls. Assign a timestamp for each token, and then check the current timestamp before making any calls. If the token is greater than 90 minutes, generate a new one. * ‚ö†Ô∏è After five failed attempts to authenticate, your account will be locked. Contact [support@finicity.com](mailto:support@finicity.com) to get help resetting your account.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
     * @summary Create Access Token
     * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).createAccessToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the Partner Secret used to authenticate this partner.  The secret does not expire, but can be changed by calling this API. A valid Partner Secret may contain upper and lowercase characters, numbers, and the characters !, @, #, $, %, &, *, _, -, +. It must include at least one number and at least one letter, and its length should be between 12 and 255 characters.  _Supported regions_: ![üá∫üá∏](https://flagcdn.com/20x15/us.png)
     * @summary Modify Partner Secret
     * @param {AuthenticationApiModifyPartnerSecretRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public modifyPartnerSecret(requestParameters: AuthenticationApiModifyPartnerSecretRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).modifyPartnerSecret(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
