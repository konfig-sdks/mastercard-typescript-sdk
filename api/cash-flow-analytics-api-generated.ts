/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsReportAck } from '../models';
// @ts-ignore
import { AnalyticsReportConstraints } from '../models';
// @ts-ignore
import { AnalyticsReportData } from '../models';
// @ts-ignore
import { BalanceAndCashFlowAnalyticsReportConstraints } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { ObbAnalyticsReport } from '../models';
// @ts-ignore
import { ObbAnalyticsReportAck } from '../models';
// @ts-ignore
import { ObbErrorMessage } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CashFlowAnalyticsApi - axios parameter creator
 * @export
 */
export const CashFlowAnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for piloting and integration testing your application with the Cash Flow Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Cash Flow Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report_ (operation: _GetCashFlowAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics
         * @param {string} customerId A customer ID
         * @param {BalanceAndCashFlowAnalyticsReportConstraints} balanceAndCashFlowAnalyticsReportConstraints 
         * @param {string} [referenceNumber] Partner-provided reference number to correlate reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnalytics: async (customerId: string, balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints, referenceNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateAnalytics', 'customerId', customerId)
            // verify required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is not null or undefined
            assertParamExists('generateAnalytics', 'balanceAndCashFlowAnalyticsReportConstraints', balanceAndCashFlowAnalyticsReportConstraints)
            const localVarPath = `/analytics/cashflow/v1/customer/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (referenceNumber !== undefined) {
                localVarQueryParameter['reference-number'] = referenceNumber;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceAndCashFlowAnalyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/cashflow/v1/customer/{customerId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceAndCashFlowAnalyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report - FCRA_ (operation: _GetCashFlowAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics - FCRA
         * @param {string} customerId A customer ID
         * @param {BalanceAndCashFlowAnalyticsReportConstraints} balanceAndCashFlowAnalyticsReportConstraints 
         * @param {string} [referenceNumber] Partner-provided reference number to correlate reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFcraAnalyticsReport: async (customerId: string, balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints, referenceNumber?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateFcraAnalyticsReport', 'customerId', customerId)
            // verify required parameter 'balanceAndCashFlowAnalyticsReportConstraints' is not null or undefined
            assertParamExists('generateFcraAnalyticsReport', 'balanceAndCashFlowAnalyticsReportConstraints', balanceAndCashFlowAnalyticsReportConstraints)
            const localVarPath = `/analytics/cashflow/v1/customer/{customerId}/fcra`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (referenceNumber !== undefined) {
                localVarQueryParameter['reference-number'] = referenceNumber;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: balanceAndCashFlowAnalyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/cashflow/v1/customer/{customerId}/fcra',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(balanceAndCashFlowAnalyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a Cashflow Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Cashflow Analytics analyzes transaction over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cashflow Analytics Report - Personal/Business
         * @param {string} customerId A customer ID
         * @param {string} userType UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.
         * @param {AnalyticsReportConstraints} analyticsReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport: async (customerId: string, userType: string, analyticsReportConstraints: AnalyticsReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateReport', 'customerId', customerId)
            // verify required parameter 'userType' is not null or undefined
            assertParamExists('generateReport', 'userType', userType)
            // verify required parameter 'analyticsReportConstraints' is not null or undefined
            assertParamExists('generateReport', 'analyticsReportConstraints', analyticsReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/reports/cashflow-analytics/userTypes/{userType}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"userType"}}`, encodeURIComponent(String(userType !== undefined ? userType : `-userType-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: analyticsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/reports/cashflow-analytics/userTypes/{userType}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(analyticsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {string} obbReportId Report ID generated and returned by OBB products
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData: async (obbReportId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obbReportId' is not null or undefined
            assertParamExists('getReportData', 'obbReportId', obbReportId)
            const localVarPath = `/analytics/data/v1/{obb_report_id}`
                .replace(`{${"obb_report_id"}}`, encodeURIComponent(String(obbReportId !== undefined ? obbReportId : `-obb_report_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/data/v1/{obb_report_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {string} obbReportId Report ID generated and returned by OBB products
         * @param {string} purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataFcra: async (obbReportId: string, purpose: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'obbReportId' is not null or undefined
            assertParamExists('getReportDataFcra', 'obbReportId', obbReportId)
            // verify required parameter 'purpose' is not null or undefined
            assertParamExists('getReportDataFcra', 'purpose', purpose)
            const localVarPath = `/analytics/data/v1/{obb_report_id}/fcra`
                .replace(`{${"obb_report_id"}}`, encodeURIComponent(String(obbReportId !== undefined ? obbReportId : `-obb_report_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/analytics/data/v1/{obb_report_id}/fcra',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CashFlowAnalyticsApi - functional programming interface
 * @export
 */
export const CashFlowAnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CashFlowAnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for piloting and integration testing your application with the Cash Flow Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Cash Flow Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report_ (operation: _GetCashFlowAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics
         * @param {CashFlowAnalyticsApiGenerateAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateAnalytics(requestParameters: CashFlowAnalyticsApiGenerateAnalyticsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReportAck>> {
            const balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints = {
                accountIds: requestParameters.accountIds,
                lengthOfReport: requestParameters.lengthOfReport
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateAnalytics(requestParameters.customerId, balanceAndCashFlowAnalyticsReportConstraints, requestParameters.referenceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report - FCRA_ (operation: _GetCashFlowAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics - FCRA
         * @param {CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateFcraAnalyticsReport(requestParameters: CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReportAck>> {
            const balanceAndCashFlowAnalyticsReportConstraints: BalanceAndCashFlowAnalyticsReportConstraints = {
                accountIds: requestParameters.accountIds,
                lengthOfReport: requestParameters.lengthOfReport
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateFcraAnalyticsReport(requestParameters.customerId, balanceAndCashFlowAnalyticsReportConstraints, requestParameters.referenceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a Cashflow Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Cashflow Analytics analyzes transaction over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cashflow Analytics Report - Personal/Business
         * @param {CashFlowAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReport(requestParameters: CashFlowAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsReportAck>> {
            const analyticsReportConstraints: AnalyticsReportConstraints = {
                analyticsReportData: requestParameters.analyticsReportData,
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                fromDate: requestParameters.fromDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReport(requestParameters.customerId, requestParameters.userType, analyticsReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {CashFlowAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportData(requestParameters: CashFlowAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportData(requestParameters.obbReportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {CashFlowAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDataFcra(requestParameters: CashFlowAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObbAnalyticsReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDataFcra(requestParameters.obbReportId, requestParameters.purpose, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CashFlowAnalyticsApi - factory interface
 * @export
 */
export const CashFlowAnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CashFlowAnalyticsApiFp(configuration)
    return {
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for piloting and integration testing your application with the Cash Flow Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Cash Flow Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report_ (operation: _GetCashFlowAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics
         * @param {CashFlowAnalyticsApiGenerateAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAnalytics(requestParameters: CashFlowAnalyticsApiGenerateAnalyticsRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReportAck> {
            return localVarFp.generateAnalytics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report - FCRA_ (operation: _GetCashFlowAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Analytics - FCRA
         * @param {CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateFcraAnalyticsReport(requestParameters: CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReportAck> {
            return localVarFp.generateFcraAnalyticsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a Cashflow Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Cashflow Analytics analyzes transaction over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cashflow Analytics Report - Personal/Business
         * @param {CashFlowAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport(requestParameters: CashFlowAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig): AxiosPromise<AnalyticsReportAck> {
            return localVarFp.generateReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report
         * @param {CashFlowAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportData(requestParameters: CashFlowAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReport> {
            return localVarFp.getReportData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get OBB Analytics Report - FCRA
         * @param {CashFlowAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDataFcra(requestParameters: CashFlowAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig): AxiosPromise<ObbAnalyticsReport> {
            return localVarFp.getReportDataFcra(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateAnalytics operation in CashFlowAnalyticsApi.
 * @export
 * @interface CashFlowAnalyticsApiGenerateAnalyticsRequest
 */
export type CashFlowAnalyticsApiGenerateAnalyticsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateAnalytics
    */
    readonly customerId: string
    
    /**
    * Partner-provided reference number to correlate reports.
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateAnalytics
    */
    readonly referenceNumber?: string
    
} & BalanceAndCashFlowAnalyticsReportConstraints

/**
 * Request parameters for generateFcraAnalyticsReport operation in CashFlowAnalyticsApi.
 * @export
 * @interface CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest
 */
export type CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateFcraAnalyticsReport
    */
    readonly customerId: string
    
    /**
    * Partner-provided reference number to correlate reports.
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateFcraAnalyticsReport
    */
    readonly referenceNumber?: string
    
} & BalanceAndCashFlowAnalyticsReportConstraints

/**
 * Request parameters for generateReport operation in CashFlowAnalyticsApi.
 * @export
 * @interface CashFlowAnalyticsApiGenerateReportRequest
 */
export type CashFlowAnalyticsApiGenerateReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateReport
    */
    readonly customerId: string
    
    /**
    * UserType indicates if the request is for a business or personal use case, Allowed values: business/personal.
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateReport
    */
    readonly userType: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof CashFlowAnalyticsApiGenerateReport
    */
    readonly callbackUrl?: string
    
} & AnalyticsReportConstraints

/**
 * Request parameters for getReportData operation in CashFlowAnalyticsApi.
 * @export
 * @interface CashFlowAnalyticsApiGetReportDataRequest
 */
export type CashFlowAnalyticsApiGetReportDataRequest = {
    
    /**
    * Report ID generated and returned by OBB products
    * @type {string}
    * @memberof CashFlowAnalyticsApiGetReportData
    */
    readonly obbReportId: string
    
}

/**
 * Request parameters for getReportDataFcra operation in CashFlowAnalyticsApi.
 * @export
 * @interface CashFlowAnalyticsApiGetReportDataFcraRequest
 */
export type CashFlowAnalyticsApiGetReportDataFcraRequest = {
    
    /**
    * Report ID generated and returned by OBB products
    * @type {string}
    * @memberof CashFlowAnalyticsApiGetReportDataFcra
    */
    readonly obbReportId: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof CashFlowAnalyticsApiGetReportDataFcra
    */
    readonly purpose: string
    
}

/**
 * CashFlowAnalyticsApiGenerated - object-oriented interface
 * @export
 * @class CashFlowAnalyticsApiGenerated
 * @extends {BaseAPI}
 */
export class CashFlowAnalyticsApiGenerated extends BaseAPI {
    /**
     * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for piloting and integration testing your application with the Cash Flow Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Cash Flow Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report_ (operation: _GetCashFlowAnalyticsReport_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Cash Flow Analytics
     * @param {CashFlowAnalyticsApiGenerateAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowAnalyticsApiGenerated
     */
    public generateAnalytics(requestParameters: CashFlowAnalyticsApiGenerateAnalyticsRequest, options?: AxiosRequestConfig) {
        return CashFlowAnalyticsApiFp(this.configuration).generateAnalytics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cash Flow Analytics for Business analyzes cash flow over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Average transaction value by month over the requested time period * Net cash flow over the requested time period and broken down by month * Count and report of weeks in the requested time period where there   were zero transactions posted to the customer\'s accounts  * Minimum/maximum/average/sum/count of deposits by month * Minimum/maximum/average/sum/count of withdrawals by month * Estimated amount of deposits that can be classified as business   revenue  * Number of transactions posted incurring a non-sufficient funds (NSF)   fee, and net amount charged in NSF fees   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Cash Flow Analytics Report - FCRA_ (operation: _GetCashFlowAnalyticsReportFCRA_).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Cash Flow Analytics - FCRA
     * @param {CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowAnalyticsApiGenerated
     */
    public generateFcraAnalyticsReport(requestParameters: CashFlowAnalyticsApiGenerateFcraAnalyticsReportRequest, options?: AxiosRequestConfig) {
        return CashFlowAnalyticsApiFp(this.configuration).generateFcraAnalyticsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a Cashflow Analytics Report for a given customer. This service retrieves up to two years of transaction history from connected accounts.  Cashflow Analytics analyzes transaction over time to report metrics and identify behavior that may indicate risk.  Before calling this API, A consumer or business may need to be created for the given customer ID based on the user type (see Consumer/Business APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  This is a premium service, billable per every successful API call for non-testing customers. A successful call to this API will generate analytics report which can be retrieved via Get Report by Customer or Get Report by Consumer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Cashflow Analytics Report - Personal/Business
     * @param {CashFlowAnalyticsApiGenerateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowAnalyticsApiGenerated
     */
    public generateReport(requestParameters: CashFlowAnalyticsApiGenerateReportRequest, options?: AxiosRequestConfig) {
        return CashFlowAnalyticsApiFp(this.configuration).generateReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the report saved by _Generate Balance Analytics_, _Generate Cash Flow Analytics_, or _Generate Payment History_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get OBB Analytics Report
     * @param {CashFlowAnalyticsApiGetReportDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowAnalyticsApiGenerated
     */
    public getReportData(requestParameters: CashFlowAnalyticsApiGetReportDataRequest, options?: AxiosRequestConfig) {
        return CashFlowAnalyticsApiFp(this.configuration).getReportData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the report saved by _Generate Balance Analytics - FCRA_, _Generate Cash Flow Analytics - FCRA_, or _Generate Payment History - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get OBB Analytics Report - FCRA
     * @param {CashFlowAnalyticsApiGetReportDataFcraRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowAnalyticsApiGenerated
     */
    public getReportDataFcra(requestParameters: CashFlowAnalyticsApiGetReportDataFcraRequest, options?: AxiosRequestConfig) {
        return CashFlowAnalyticsApiFp(this.configuration).getReportDataFcra(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
