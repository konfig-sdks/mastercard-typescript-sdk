/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { PayStatementData } from '../models';
// @ts-ignore
import { PayStatementReportAck } from '../models';
// @ts-ignore
import { PayStatementReportConstraints } from '../models';
// @ts-ignore
import { PayrollData } from '../models';
// @ts-ignore
import { PayrollReportAck } from '../models';
// @ts-ignore
import { PayrollReportConstraints } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
// @ts-ignore
import { VOETransactionsReportAck } from '../models';
// @ts-ignore
import { VOETransactionsReportConstraints } from '../models';
// @ts-ignore
import { VOIEPaystubReportAck } from '../models';
// @ts-ignore
import { VOIEPaystubWithTXVerifyReportAck } from '../models';
// @ts-ignore
import { VOIEReportConstraints } from '../models';
// @ts-ignore
import { VOIEWithInterviewData } from '../models';
// @ts-ignore
import { VOIEWithStatementData } from '../models';
// @ts-ignore
import { VOIEWithTXVerifyReportConstraints } from '../models';
// @ts-ignore
import { VOIReportAck } from '../models';
// @ts-ignore
import { VOIReportConstraints } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VerifyIncomeAndEmploymentApi - axios parameter creator
 * @export
 */
export const VerifyIncomeAndEmploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOI Report
         * @param {string} customerId A customer ID
         * @param {VOIReportConstraints} vOIReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVOIReport: async (customerId: string, vOIReportConstraints: VOIReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createVOIReport', 'customerId', customerId)
            // verify required parameter 'vOIReportConstraints' is not null or undefined
            assertParamExists('createVOIReport', 'vOIReportConstraints', vOIReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voi`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOIReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voi',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOIReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Pay Statement Report
         * @param {string} customerId A customer ID
         * @param {PayStatementReportConstraints} payStatementReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePayStatementReport: async (customerId: string, payStatementReportConstraints: PayStatementReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generatePayStatementReport', 'customerId', customerId)
            // verify required parameter 'payStatementReportConstraints' is not null or undefined
            assertParamExists('generatePayStatementReport', 'payStatementReportConstraints', payStatementReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/payStatement`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payStatementReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/payStatement',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payStatementReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower\'s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn\'t necessary.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Transactions Report
         * @param {string} customerId A customer ID
         * @param {VOETransactionsReportConstraints} vOETransactionsReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOETransactionsReport: async (customerId: string, vOETransactionsReportConstraints: VOETransactionsReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateVOETransactionsReport', 'customerId', customerId)
            // verify required parameter 'vOETransactionsReportConstraints' is not null or undefined
            assertParamExists('generateVOETransactionsReport', 'vOETransactionsReportConstraints', vOETransactionsReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voeTransactions`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOETransactionsReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voeTransactions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOETransactionsReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub (with TXVerify) Report
         * @param {string} customerId A customer ID
         * @param {VOIEWithTXVerifyReportConstraints} vOIEWithTXVerifyReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOIEPaystubWithTxVerifyReport: async (customerId: string, vOIEWithTXVerifyReportConstraints: VOIEWithTXVerifyReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateVOIEPaystubWithTxVerifyReport', 'customerId', customerId)
            // verify required parameter 'vOIEWithTXVerifyReportConstraints' is not null or undefined
            assertParamExists('generateVOIEPaystubWithTxVerifyReport', 'vOIEWithTXVerifyReportConstraints', vOIEWithTXVerifyReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voieTxVerify/withInterview`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOIEWithTXVerifyReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voieTxVerify/withInterview',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOIEWithTXVerifyReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer\'s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Payroll Report
         * @param {string} customerId A customer ID
         * @param {PayrollReportConstraints} payrollReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoePayrollReport: async (customerId: string, payrollReportConstraints: PayrollReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateVoePayrollReport', 'customerId', customerId)
            // verify required parameter 'payrollReportConstraints' is not null or undefined
            assertParamExists('generateVoePayrollReport', 'payrollReportConstraints', payrollReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voePayroll`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voePayroll',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub Report
         * @param {string} customerId A customer ID
         * @param {VOIEReportConstraints} vOIEReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoiePaystubReport: async (customerId: string, vOIEReportConstraints: VOIEReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateVoiePaystubReport', 'customerId', customerId)
            // verify required parameter 'vOIEReportConstraints' is not null or undefined
            assertParamExists('generateVoiePaystubReport', 'vOIEReportConstraints', vOIEReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voieTxVerify/withStatement`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOIEReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voieTxVerify/withStatement',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOIEReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Payroll Report
         * @param {string} customerId A customer ID
         * @param {PayrollReportConstraints} payrollReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshVOIEPayrollReport: async (customerId: string, payrollReportConstraints: PayrollReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('refreshVOIEPayrollReport', 'customerId', customerId)
            // verify required parameter 'payrollReportConstraints' is not null or undefined
            assertParamExists('refreshVOIEPayrollReport', 'payrollReportConstraints', payrollReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voiePayroll`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payrollReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voiePayroll',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payrollReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifyIncomeAndEmploymentApi - functional programming interface
 * @export
 */
export const VerifyIncomeAndEmploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifyIncomeAndEmploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOI Report
         * @param {VerifyIncomeAndEmploymentApiCreateVOIReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVOIReport(requestParameters: VerifyIncomeAndEmploymentApiCreateVOIReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOIReportAck>> {
            const vOIReportConstraints: VOIReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVOIReport(requestParameters.customerId, vOIReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Pay Statement Report
         * @param {VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePayStatementReport(requestParameters: VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayStatementReportAck>> {
            const payStatementReportConstraints: PayStatementReportConstraints = {
                paystatementReport: requestParameters.paystatementReport,
                reportCustomFields: requestParameters.reportCustomFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePayStatementReport(requestParameters.customerId, payStatementReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower\'s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn\'t necessary.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Transactions Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVOETransactionsReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOETransactionsReportAck>> {
            const vOETransactionsReportConstraints: VOETransactionsReportConstraints = {
                reportId: requestParameters.reportId,
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVOETransactionsReport(requestParameters.customerId, vOETransactionsReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub (with TXVerify) Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVOIEPaystubWithTxVerifyReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOIEPaystubWithTXVerifyReportAck>> {
            const vOIEWithTXVerifyReportConstraints: VOIEWithTXVerifyReportConstraints = {
                accountIds: requestParameters.accountIds,
                voieWithInterviewData: requestParameters.voieWithInterviewData,
                reportCustomFields: requestParameters.reportCustomFields,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVOIEPaystubWithTxVerifyReport(requestParameters.customerId, vOIEWithTXVerifyReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer\'s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Payroll Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVoePayrollReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollReportAck>> {
            const payrollReportConstraints: PayrollReportConstraints = {
                payrollData: requestParameters.payrollData,
                reportCustomFields: requestParameters.reportCustomFields,
                payStatementsFromDate: requestParameters.payStatementsFromDate,
                marketSegment: requestParameters.marketSegment,
                excludeEmpInfo: requestParameters.excludeEmpInfo,
                purpose: requestParameters.purpose
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVoePayrollReport(requestParameters.customerId, payrollReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVoiePaystubReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOIEPaystubReportAck>> {
            const vOIEReportConstraints: VOIEReportConstraints = {
                voieWithStatementData: requestParameters.voieWithStatementData,
                reportCustomFields: requestParameters.reportCustomFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVoiePaystubReport(requestParameters.customerId, vOIEReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Payroll Report
         * @param {VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshVOIEPayrollReport(requestParameters: VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollReportAck>> {
            const payrollReportConstraints: PayrollReportConstraints = {
                payrollData: requestParameters.payrollData,
                reportCustomFields: requestParameters.reportCustomFields,
                payStatementsFromDate: requestParameters.payStatementsFromDate,
                marketSegment: requestParameters.marketSegment,
                excludeEmpInfo: requestParameters.excludeEmpInfo,
                purpose: requestParameters.purpose
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshVOIEPayrollReport(requestParameters.customerId, payrollReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerifyIncomeAndEmploymentApi - factory interface
 * @export
 */
export const VerifyIncomeAndEmploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifyIncomeAndEmploymentApiFp(configuration)
    return {
        /**
         * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOI Report
         * @param {VerifyIncomeAndEmploymentApiCreateVOIReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVOIReport(requestParameters: VerifyIncomeAndEmploymentApiCreateVOIReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOIReportAck> {
            return localVarFp.createVOIReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Pay Statement Report
         * @param {VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePayStatementReport(requestParameters: VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest, options?: AxiosRequestConfig): AxiosPromise<PayStatementReportAck> {
            return localVarFp.generatePayStatementReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower\'s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn\'t necessary.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Transactions Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOETransactionsReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOETransactionsReportAck> {
            return localVarFp.generateVOETransactionsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub (with TXVerify) Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOIEPaystubWithTxVerifyReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOIEPaystubWithTXVerifyReportAck> {
            return localVarFp.generateVOIEPaystubWithTxVerifyReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer\'s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOE - Payroll Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoePayrollReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollReportAck> {
            return localVarFp.generateVoePayrollReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Paystub Report
         * @param {VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVoiePaystubReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOIEPaystubReportAck> {
            return localVarFp.generateVoiePaystubReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOIE - Payroll Report
         * @param {VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshVOIEPayrollReport(requestParameters: VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollReportAck> {
            return localVarFp.refreshVOIEPayrollReport(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVOIReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiCreateVOIReportRequest
 */
export type VerifyIncomeAndEmploymentApiCreateVOIReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiCreateVOIReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiCreateVOIReport
    */
    readonly callbackUrl?: string
    
} & VOIReportConstraints

/**
 * Request parameters for generatePayStatementReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest
 */
export type VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGeneratePayStatementReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGeneratePayStatementReport
    */
    readonly callbackUrl?: string
    
} & PayStatementReportConstraints

/**
 * Request parameters for generateVOETransactionsReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest
 */
export type VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVOETransactionsReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVOETransactionsReport
    */
    readonly callbackUrl?: string
    
} & VOETransactionsReportConstraints

/**
 * Request parameters for generateVOIEPaystubWithTxVerifyReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest
 */
export type VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReport
    */
    readonly callbackUrl?: string
    
} & VOIEWithTXVerifyReportConstraints

/**
 * Request parameters for generateVoePayrollReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest
 */
export type VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVoePayrollReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVoePayrollReport
    */
    readonly callbackUrl?: string
    
} & PayrollReportConstraints

/**
 * Request parameters for generateVoiePaystubReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest
 */
export type VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVoiePaystubReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiGenerateVoiePaystubReport
    */
    readonly callbackUrl?: string
    
} & VOIEReportConstraints

/**
 * Request parameters for refreshVOIEPayrollReport operation in VerifyIncomeAndEmploymentApi.
 * @export
 * @interface VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest
 */
export type VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReport
    */
    readonly callbackUrl?: string
    
} & PayrollReportConstraints

/**
 * VerifyIncomeAndEmploymentApiGenerated - object-oriented interface
 * @export
 * @class VerifyIncomeAndEmploymentApiGenerated
 * @extends {BaseAPI}
 */
export class VerifyIncomeAndEmploymentApiGenerated extends BaseAPI {
    /**
     * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOI Report
     * @param {VerifyIncomeAndEmploymentApiCreateVOIReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public createVOIReport(requestParameters: VerifyIncomeAndEmploymentApiCreateVOIReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).createVOIReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Pay Statement Report
     * @param {VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public generatePayStatementReport(requestParameters: VerifyIncomeAndEmploymentApiGeneratePayStatementReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).generatePayStatementReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower\'s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn\'t necessary.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOE - Transactions Report
     * @param {VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public generateVOETransactionsReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOETransactionsReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).generateVOETransactionsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOIE - Paystub (with TXVerify) Report
     * @param {VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public generateVOIEPaystubWithTxVerifyReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVOIEPaystubWithTxVerifyReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).generateVOIEPaystubWithTxVerifyReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer\'s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOE - Payroll Report
     * @param {VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public generateVoePayrollReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoePayrollReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).generateVoePayrollReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOIE - Paystub Report
     * @param {VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public generateVoiePaystubReport(requestParameters: VerifyIncomeAndEmploymentApiGenerateVoiePaystubReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).generateVoiePaystubReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOIE - Payroll Report
     * @param {VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyIncomeAndEmploymentApiGenerated
     */
    public refreshVOIEPayrollReport(requestParameters: VerifyIncomeAndEmploymentApiRefreshVOIEPayrollReportRequest, options?: AxiosRequestConfig) {
        return VerifyIncomeAndEmploymentApiFp(this.configuration).refreshVOIEPayrollReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
