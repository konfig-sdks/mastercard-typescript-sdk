/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { Report } from '../models';
// @ts-ignore
import { ReportSummaries } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Consumer ID
         * @param {string} consumerId The consumer ID
         * @param {string} [purpose] 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byConsumerId: async (consumerId: string, purpose?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            assertParamExists('byConsumerId', 'consumerId', consumerId)
            const localVarPath = `/decisioning/v1/consumers/{consumerId}/reports`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId !== undefined ? consumerId : `-consumerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/consumers/{consumerId}/reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Customer ID
         * @param {string} customerId A customer ID
         * @param {string} [purpose] 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byCustomerId: async (customerId: string, purpose?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('byCustomerId', 'customerId', customerId)
            const localVarPath = `/decisioning/v1/customers/{customerId}/reports`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/customers/{customerId}/reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Consumer and ID
         * @param {string} consumerId The consumer ID
         * @param {string} reportId ID of the report
         * @param {string} [purpose] 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {string} [onBehalfOf] The name of the entity you are retrieving the report on behalf of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByConsumerAndId: async (consumerId: string, reportId: string, purpose?: string, onBehalfOf?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            assertParamExists('getByConsumerAndId', 'consumerId', consumerId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getByConsumerAndId', 'reportId', reportId)
            const localVarPath = `/decisioning/v3/consumers/{consumerId}/reports/{reportId}`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId !== undefined ? consumerId : `-consumerId-`)))
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }

            if (onBehalfOf !== undefined) {
                localVarQueryParameter['onBehalfOf'] = onBehalfOf;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v3/consumers/{consumerId}/reports/{reportId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Customer and ID
         * @param {string} customerId A customer ID
         * @param {string} reportId ID of the report
         * @param {string} [onBehalfOf] The name of the entity you are retrieving the report on behalf of
         * @param {string} [purpose] 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (customerId: string, reportId: string, onBehalfOf?: string, purpose?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getStatus', 'customerId', customerId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getStatus', 'reportId', reportId)
            const localVarPath = `/decisioning/v3/customers/{customerId}/reports/{reportId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId !== undefined ? reportId : `-reportId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (onBehalfOf !== undefined) {
                localVarQueryParameter['onBehalfOf'] = onBehalfOf;
            }

            if (purpose !== undefined) {
                localVarQueryParameter['purpose'] = purpose;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v3/customers/{customerId}/reports/{reportId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Consumer ID
         * @param {ReportsApiByConsumerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byConsumerId(requestParameters: ReportsApiByConsumerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSummaries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byConsumerId(requestParameters.consumerId, requestParameters.purpose, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Customer ID
         * @param {ReportsApiByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byCustomerId(requestParameters: ReportsApiByCustomerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportSummaries>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.byCustomerId(requestParameters.customerId, requestParameters.purpose, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Consumer and ID
         * @param {ReportsApiGetByConsumerAndIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByConsumerAndId(requestParameters: ReportsApiGetByConsumerAndIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByConsumerAndId(requestParameters.consumerId, requestParameters.reportId, requestParameters.purpose, requestParameters.onBehalfOf, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Customer and ID
         * @param {ReportsApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(requestParameters: ReportsApiGetStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(requestParameters.customerId, requestParameters.reportId, requestParameters.onBehalfOf, requestParameters.purpose, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Consumer ID
         * @param {ReportsApiByConsumerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byConsumerId(requestParameters: ReportsApiByConsumerIdRequest, options?: AxiosRequestConfig): AxiosPromise<ReportSummaries> {
            return localVarFp.byConsumerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Reports by Customer ID
         * @param {ReportsApiByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byCustomerId(requestParameters: ReportsApiByCustomerIdRequest, options?: AxiosRequestConfig): AxiosPromise<ReportSummaries> {
            return localVarFp.byCustomerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Consumer and ID
         * @param {ReportsApiGetByConsumerAndIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByConsumerAndId(requestParameters: ReportsApiGetByConsumerAndIdRequest, options?: AxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.getByConsumerAndId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Report by Customer and ID
         * @param {ReportsApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(requestParameters: ReportsApiGetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.getStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byConsumerId operation in ReportsApi.
 * @export
 * @interface ReportsApiByConsumerIdRequest
 */
export type ReportsApiByConsumerIdRequest = {
    
    /**
    * The consumer ID
    * @type {string}
    * @memberof ReportsApiByConsumerId
    */
    readonly consumerId: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof ReportsApiByConsumerId
    */
    readonly purpose?: string
    
}

/**
 * Request parameters for byCustomerId operation in ReportsApi.
 * @export
 * @interface ReportsApiByCustomerIdRequest
 */
export type ReportsApiByCustomerIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof ReportsApiByCustomerId
    */
    readonly customerId: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof ReportsApiByCustomerId
    */
    readonly purpose?: string
    
}

/**
 * Request parameters for getByConsumerAndId operation in ReportsApi.
 * @export
 * @interface ReportsApiGetByConsumerAndIdRequest
 */
export type ReportsApiGetByConsumerAndIdRequest = {
    
    /**
    * The consumer ID
    * @type {string}
    * @memberof ReportsApiGetByConsumerAndId
    */
    readonly consumerId: string
    
    /**
    * ID of the report
    * @type {string}
    * @memberof ReportsApiGetByConsumerAndId
    */
    readonly reportId: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof ReportsApiGetByConsumerAndId
    */
    readonly purpose?: string
    
    /**
    * The name of the entity you are retrieving the report on behalf of
    * @type {string}
    * @memberof ReportsApiGetByConsumerAndId
    */
    readonly onBehalfOf?: string
    
}

/**
 * Request parameters for getStatus operation in ReportsApi.
 * @export
 * @interface ReportsApiGetStatusRequest
 */
export type ReportsApiGetStatusRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof ReportsApiGetStatus
    */
    readonly customerId: string
    
    /**
    * ID of the report
    * @type {string}
    * @memberof ReportsApiGetStatus
    */
    readonly reportId: string
    
    /**
    * The name of the entity you are retrieving the report on behalf of
    * @type {string}
    * @memberof ReportsApiGetStatus
    */
    readonly onBehalfOf?: string
    
    /**
    * 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.
    * @type {string}
    * @memberof ReportsApiGetStatus
    */
    readonly purpose?: string
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Reports by Consumer ID
     * @param {ReportsApiByConsumerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public byConsumerId(requestParameters: ReportsApiByConsumerIdRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).byConsumerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The `status` fields in the returned list contain \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Reports by Customer ID
     * @param {ReportsApiByCustomerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public byCustomerId(requestParameters: ReportsApiByCustomerIdRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).byCustomerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Report by Consumer and ID
     * @param {ReportsApiGetByConsumerAndIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getByConsumerAndId(requestParameters: ReportsApiGetByConsumerAndIdRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getByConsumerAndId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report\'s `status` field contains \"inProgress\", \"failure\", or \"success\". If the status shows \"inProgress\", the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Report by Customer and ID
     * @param {ReportsApiGetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getStatus(requestParameters: ReportsApiGetStatusRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
