/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerAccountSimple } from '../models';
// @ts-ignore
import { CustomerAccountsSimple } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsSimpleApi - axios parameter creator
 * @export
 */
export const AccountsSimpleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API is a lighter version of Get Customer Accounts by Institution ID, returning only basic information of active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID (Simple)
         * @param {string} customerId A customer ID
         * @param {number} institutionId The institution ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo: async (customerId: string, institutionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBasicInfo', 'customerId', customerId)
            // verify required parameter 'institutionId' is not null or undefined
            assertParamExists('getBasicInfo', 'institutionId', institutionId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts/simple`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionId"}}`, encodeURIComponent(String(institutionId !== undefined ? institutionId : `-institutionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts/simple',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is a lighter version of Get Customer Accounts by Institution Login ID, returning only basic information of all active accounts owned by the given customer at the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID (Simple)
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_1: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBasicInfo_1', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('getBasicInfo_1', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts/simple`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts/simple',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is a lighter version of Get Customer Accounts by ID, returning only basic information of a customer account.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID (Simple)
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_2: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBasicInfo_2', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getBasicInfo_2', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/simple`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/simple',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is a lighter version of Get Customer Accounts, returning only basic information of all active customer accounts.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts (Simple)
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_3: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBasicInfo_3', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/simple`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/simple',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsSimpleApi - functional programming interface
 * @export
 */
export const AccountsSimpleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsSimpleApiAxiosParamCreator(configuration)
    return {
        /**
         * This API is a lighter version of Get Customer Accounts by Institution ID, returning only basic information of active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo(requestParameters: AccountsSimpleApiGetBasicInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccountsSimple>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo(requestParameters.customerId, requestParameters.institutionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API is a lighter version of Get Customer Accounts by Institution Login ID, returning only basic information of all active accounts owned by the given customer at the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo_1(requestParameters: AccountsSimpleApiGetBasicInfo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccountsSimple>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo_1(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API is a lighter version of Get Customer Accounts by ID, returning only basic information of a customer account.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo_2(requestParameters: AccountsSimpleApiGetBasicInfo1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccountSimple>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo_2(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API is a lighter version of Get Customer Accounts, returning only basic information of all active customer accounts.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts (Simple)
         * @param {AccountsSimpleApiGetBasicInfo2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicInfo_3(requestParameters: AccountsSimpleApiGetBasicInfo2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccountsSimple>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicInfo_3(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsSimpleApi - factory interface
 * @export
 */
export const AccountsSimpleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsSimpleApiFp(configuration)
    return {
        /**
         * This API is a lighter version of Get Customer Accounts by Institution ID, returning only basic information of active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo(requestParameters: AccountsSimpleApiGetBasicInfoRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccountsSimple> {
            return localVarFp.getBasicInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is a lighter version of Get Customer Accounts by Institution Login ID, returning only basic information of all active accounts owned by the given customer at the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_1(requestParameters: AccountsSimpleApiGetBasicInfo0Request, options?: AxiosRequestConfig): AxiosPromise<CustomerAccountsSimple> {
            return localVarFp.getBasicInfo_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is a lighter version of Get Customer Accounts by ID, returning only basic information of a customer account.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID (Simple)
         * @param {AccountsSimpleApiGetBasicInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_2(requestParameters: AccountsSimpleApiGetBasicInfo1Request, options?: AxiosRequestConfig): AxiosPromise<CustomerAccountSimple> {
            return localVarFp.getBasicInfo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is a lighter version of Get Customer Accounts, returning only basic information of all active customer accounts.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts (Simple)
         * @param {AccountsSimpleApiGetBasicInfo2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicInfo_3(requestParameters: AccountsSimpleApiGetBasicInfo2Request, options?: AxiosRequestConfig): AxiosPromise<CustomerAccountsSimple> {
            return localVarFp.getBasicInfo_3(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBasicInfo operation in AccountsSimpleApi.
 * @export
 * @interface AccountsSimpleApiGetBasicInfoRequest
 */
export type AccountsSimpleApiGetBasicInfoRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo
    */
    readonly customerId: string
    
    /**
    * The institution ID
    * @type {number}
    * @memberof AccountsSimpleApiGetBasicInfo
    */
    readonly institutionId: number
    
}

/**
 * Request parameters for getBasicInfo_1 operation in AccountsSimpleApi.
 * @export
 * @interface AccountsSimpleApiGetBasicInfo0Request
 */
export type AccountsSimpleApiGetBasicInfo0Request = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo0
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo0
    */
    readonly institutionLoginId: string
    
}

/**
 * Request parameters for getBasicInfo_2 operation in AccountsSimpleApi.
 * @export
 * @interface AccountsSimpleApiGetBasicInfo1Request
 */
export type AccountsSimpleApiGetBasicInfo1Request = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo1
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo1
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getBasicInfo_3 operation in AccountsSimpleApi.
 * @export
 * @interface AccountsSimpleApiGetBasicInfo2Request
 */
export type AccountsSimpleApiGetBasicInfo2Request = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsSimpleApiGetBasicInfo2
    */
    readonly customerId: string
    
}

/**
 * AccountsSimpleApiGenerated - object-oriented interface
 * @export
 * @class AccountsSimpleApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsSimpleApiGenerated extends BaseAPI {
    /**
     * This API is a lighter version of Get Customer Accounts by Institution ID, returning only basic information of active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts by Institution ID (Simple)
     * @param {AccountsSimpleApiGetBasicInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsSimpleApiGenerated
     */
    public getBasicInfo(requestParameters: AccountsSimpleApiGetBasicInfoRequest, options?: AxiosRequestConfig) {
        return AccountsSimpleApiFp(this.configuration).getBasicInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is a lighter version of Get Customer Accounts by Institution Login ID, returning only basic information of all active accounts owned by the given customer at the given institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts by Institution Login ID (Simple)
     * @param {AccountsSimpleApiGetBasicInfo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsSimpleApiGenerated
     */
    public getBasicInfo_1(requestParameters: AccountsSimpleApiGetBasicInfo0Request, options?: AxiosRequestConfig) {
        return AccountsSimpleApiFp(this.configuration).getBasicInfo_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is a lighter version of Get Customer Accounts by ID, returning only basic information of a customer account.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Account by ID (Simple)
     * @param {AccountsSimpleApiGetBasicInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsSimpleApiGenerated
     */
    public getBasicInfo_2(requestParameters: AccountsSimpleApiGetBasicInfo1Request, options?: AxiosRequestConfig) {
        return AccountsSimpleApiFp(this.configuration).getBasicInfo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is a lighter version of Get Customer Accounts, returning only basic information of all active customer accounts.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts (Simple)
     * @param {AccountsSimpleApiGetBasicInfo2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsSimpleApiGenerated
     */
    public getBasicInfo_3(requestParameters: AccountsSimpleApiGetBasicInfo2Request, options?: AxiosRequestConfig) {
        return AccountsSimpleApiFp(this.configuration).getBasicInfo_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
