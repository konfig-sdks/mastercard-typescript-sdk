/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerAccount } from '../models';
// @ts-ignore
import { CustomerAccounts } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getById', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getById', 'accountId', accountId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/accounts/{accountId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/accounts/{accountId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByInstitutionLogin: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getByInstitutionLogin', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('getByInstitutionLogin', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts
         * @param {string} customerId A customer ID
         * @param {string} [status] A filter to fetch account in the given status
         * @param {string} [accountType] A filter to fetch accounts for the given type. Currently supported types: \&quot;ava\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccounts: async (customerId: string, status?: string, accountType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerAccounts', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['account_type'] = accountType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID
         * @param {string} customerId A customer ID
         * @param {number} institutionId The institution ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInstitutionAccounts: async (customerId: string, institutionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerInstitutionAccounts', 'customerId', customerId)
            // verify required parameter 'institutionId' is not null or undefined
            assertParamExists('getCustomerInstitutionAccounts', 'institutionId', institutionId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionId"}}`, encodeURIComponent(String(institutionId !== undefined ? institutionId : `-institutionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutions/{institutionId}/accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given \'institutionLoginId` with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Account by Institution Login ID for Data Access Tiers
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerAccountByInstitutionLogin: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('refreshCustomerAccountByInstitutionLogin', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('refreshCustomerAccountByInstitutionLogin', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerAggregation: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('refreshCustomerAggregation', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts by Institution Login ID
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerByInstitutionLogin: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('refreshCustomerByInstitutionLogin', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('refreshCustomerByInstitutionLogin', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}/accounts',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts for Data Access Tiers
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerData: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('refreshCustomerData', 'customerId', customerId)
            const localVarPath = `/aggregation/v2/customers/{customerId}/accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/{customerId}/accounts',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the given account from Finicity aggregation.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Account by ID
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByCustomerIdAndAccountId: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('removeByCustomerIdAndAccountId', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('removeByCustomerIdAndAccountId', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove from Finicity aggregation the set of accounts matching the institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Accounts by Institution Login ID
         * @param {string} customerId A customer ID
         * @param {string} institutionLoginId The institution login ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByInstitutionLogin: async (customerId: string, institutionLoginId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('removeByInstitutionLogin', 'customerId', customerId)
            // verify required parameter 'institutionLoginId' is not null or undefined
            assertParamExists('removeByInstitutionLogin', 'institutionLoginId', institutionLoginId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"institutionLoginId"}}`, encodeURIComponent(String(institutionLoginId !== undefined ? institutionLoginId : `-institutionLoginId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/institutionLogins/{institutionLoginId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID
         * @param {AccountsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: AccountsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID
         * @param {AccountsApiGetByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByInstitutionLogin(requestParameters: AccountsApiGetByInstitutionLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByInstitutionLogin(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts
         * @param {AccountsApiGetCustomerAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerAccounts(requestParameters: AccountsApiGetCustomerAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerAccounts(requestParameters.customerId, requestParameters.status, requestParameters.accountType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID
         * @param {AccountsApiGetCustomerInstitutionAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerInstitutionAccounts(requestParameters: AccountsApiGetCustomerInstitutionAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerInstitutionAccounts(requestParameters.customerId, requestParameters.institutionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given \'institutionLoginId` with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Account by Institution Login ID for Data Access Tiers
         * @param {AccountsApiRefreshCustomerAccountByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCustomerAccountByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerAccountByInstitutionLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCustomerAccountByInstitutionLogin(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts
         * @param {AccountsApiRefreshCustomerAggregationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCustomerAggregation(requestParameters: AccountsApiRefreshCustomerAggregationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCustomerAggregation(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts by Institution Login ID
         * @param {AccountsApiRefreshCustomerByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCustomerByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerByInstitutionLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccounts>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCustomerByInstitutionLogin(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts for Data Access Tiers
         * @param {AccountsApiRefreshCustomerDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshCustomerData(requestParameters: AccountsApiRefreshCustomerDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshCustomerData(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove the given account from Finicity aggregation.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Account by ID
         * @param {AccountsApiRemoveByCustomerIdAndAccountIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByCustomerIdAndAccountId(requestParameters: AccountsApiRemoveByCustomerIdAndAccountIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByCustomerIdAndAccountId(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove from Finicity aggregation the set of accounts matching the institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Accounts by Institution Login ID
         * @param {AccountsApiRemoveByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeByInstitutionLogin(requestParameters: AccountsApiRemoveByInstitutionLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeByInstitutionLogin(requestParameters.customerId, requestParameters.institutionLoginId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account by ID
         * @param {AccountsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AccountsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccount> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution Login ID
         * @param {AccountsApiGetByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByInstitutionLogin(requestParameters: AccountsApiGetByInstitutionLoginRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.getByInstitutionLogin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts
         * @param {AccountsApiGetCustomerAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerAccounts(requestParameters: AccountsApiGetCustomerAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.getCustomerAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Accounts by Institution ID
         * @param {AccountsApiGetCustomerInstitutionAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInstitutionAccounts(requestParameters: AccountsApiGetCustomerInstitutionAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.getCustomerInstitutionAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given \'institutionLoginId` with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Account by Institution Login ID for Data Access Tiers
         * @param {AccountsApiRefreshCustomerAccountByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerAccountByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerAccountByInstitutionLoginRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refreshCustomerAccountByInstitutionLogin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts
         * @param {AccountsApiRefreshCustomerAggregationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerAggregation(requestParameters: AccountsApiRefreshCustomerAggregationRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.refreshCustomerAggregation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts by Institution Login ID
         * @param {AccountsApiRefreshCustomerByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerByInstitutionLoginRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccounts> {
            return localVarFp.refreshCustomerByInstitutionLogin(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Refresh Customer Accounts for Data Access Tiers
         * @param {AccountsApiRefreshCustomerDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCustomerData(requestParameters: AccountsApiRefreshCustomerDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refreshCustomerData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the given account from Finicity aggregation.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Account by ID
         * @param {AccountsApiRemoveByCustomerIdAndAccountIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByCustomerIdAndAccountId(requestParameters: AccountsApiRemoveByCustomerIdAndAccountIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByCustomerIdAndAccountId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove from Finicity aggregation the set of accounts matching the institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer Accounts by Institution Login ID
         * @param {AccountsApiRemoveByInstitutionLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeByInstitutionLogin(requestParameters: AccountsApiRemoveByInstitutionLoginRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeByInstitutionLogin(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in AccountsApi.
 * @export
 * @interface AccountsApiGetByIdRequest
 */
export type AccountsApiGetByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiGetById
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof AccountsApiGetById
    */
    readonly accountId: string
    
}

/**
 * Request parameters for getByInstitutionLogin operation in AccountsApi.
 * @export
 * @interface AccountsApiGetByInstitutionLoginRequest
 */
export type AccountsApiGetByInstitutionLoginRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiGetByInstitutionLogin
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AccountsApiGetByInstitutionLogin
    */
    readonly institutionLoginId: string
    
}

/**
 * Request parameters for getCustomerAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiGetCustomerAccountsRequest
 */
export type AccountsApiGetCustomerAccountsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiGetCustomerAccounts
    */
    readonly customerId: string
    
    /**
    * A filter to fetch account in the given status
    * @type {string}
    * @memberof AccountsApiGetCustomerAccounts
    */
    readonly status?: string
    
    /**
    * A filter to fetch accounts for the given type. Currently supported types: \"ava\"
    * @type {string}
    * @memberof AccountsApiGetCustomerAccounts
    */
    readonly accountType?: string
    
}

/**
 * Request parameters for getCustomerInstitutionAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiGetCustomerInstitutionAccountsRequest
 */
export type AccountsApiGetCustomerInstitutionAccountsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiGetCustomerInstitutionAccounts
    */
    readonly customerId: string
    
    /**
    * The institution ID
    * @type {number}
    * @memberof AccountsApiGetCustomerInstitutionAccounts
    */
    readonly institutionId: number
    
}

/**
 * Request parameters for refreshCustomerAccountByInstitutionLogin operation in AccountsApi.
 * @export
 * @interface AccountsApiRefreshCustomerAccountByInstitutionLoginRequest
 */
export type AccountsApiRefreshCustomerAccountByInstitutionLoginRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerAccountByInstitutionLogin
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerAccountByInstitutionLogin
    */
    readonly institutionLoginId: string
    
}

/**
 * Request parameters for refreshCustomerAggregation operation in AccountsApi.
 * @export
 * @interface AccountsApiRefreshCustomerAggregationRequest
 */
export type AccountsApiRefreshCustomerAggregationRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerAggregation
    */
    readonly customerId: string
    
}

/**
 * Request parameters for refreshCustomerByInstitutionLogin operation in AccountsApi.
 * @export
 * @interface AccountsApiRefreshCustomerByInstitutionLoginRequest
 */
export type AccountsApiRefreshCustomerByInstitutionLoginRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerByInstitutionLogin
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerByInstitutionLogin
    */
    readonly institutionLoginId: string
    
}

/**
 * Request parameters for refreshCustomerData operation in AccountsApi.
 * @export
 * @interface AccountsApiRefreshCustomerDataRequest
 */
export type AccountsApiRefreshCustomerDataRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRefreshCustomerData
    */
    readonly customerId: string
    
}

/**
 * Request parameters for removeByCustomerIdAndAccountId operation in AccountsApi.
 * @export
 * @interface AccountsApiRemoveByCustomerIdAndAccountIdRequest
 */
export type AccountsApiRemoveByCustomerIdAndAccountIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRemoveByCustomerIdAndAccountId
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof AccountsApiRemoveByCustomerIdAndAccountId
    */
    readonly accountId: string
    
}

/**
 * Request parameters for removeByInstitutionLogin operation in AccountsApi.
 * @export
 * @interface AccountsApiRemoveByInstitutionLoginRequest
 */
export type AccountsApiRemoveByInstitutionLoginRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountsApiRemoveByInstitutionLogin
    */
    readonly customerId: string
    
    /**
    * The institution login ID
    * @type {string}
    * @memberof AccountsApiRemoveByInstitutionLogin
    */
    readonly institutionLoginId: string
    
}

/**
 * AccountsApiGenerated - object-oriented interface
 * @export
 * @class AccountsApiGenerated
 * @extends {BaseAPI}
 */
export class AccountsApiGenerated extends BaseAPI {
    /**
     * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Account by ID
     * @param {AccountsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getById(requestParameters: AccountsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts by Institution Login ID
     * @param {AccountsApiGetByInstitutionLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getByInstitutionLogin(requestParameters: AccountsApiGetByInstitutionLoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getByInstitutionLogin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts
     * @param {AccountsApiGetCustomerAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getCustomerAccounts(requestParameters: AccountsApiGetCustomerAccountsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getCustomerAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Accounts by Institution ID
     * @param {AccountsApiGetCustomerInstitutionAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public getCustomerInstitutionAccounts(requestParameters: AccountsApiGetCustomerInstitutionAccountsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getCustomerInstitutionAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh account and transaction data for all accounts associated with a given \'institutionLoginId` with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Refresh Customer Account by Institution Login ID for Data Access Tiers
     * @param {AccountsApiRefreshCustomerAccountByInstitutionLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public refreshCustomerAccountByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerAccountByInstitutionLoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).refreshCustomerAccountByInstitutionLogin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Refresh Customer Accounts
     * @param {AccountsApiRefreshCustomerAggregationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public refreshCustomerAggregation(requestParameters: AccountsApiRefreshCustomerAggregationRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).refreshCustomerAggregation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh account and transaction data for all accounts associated with a given `institutionLoginId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all tiers of dynamic billing.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Refresh Customer Accounts by Institution Login ID
     * @param {AccountsApiRefreshCustomerByInstitutionLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public refreshCustomerByInstitutionLogin(requestParameters: AccountsApiRefreshCustomerByInstitutionLoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).refreshCustomerByInstitutionLogin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh account and transaction data for all accounts associated with the  given `customerId` with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for dynamic billing tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Refresh Customer Accounts for Data Access Tiers
     * @param {AccountsApiRefreshCustomerDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public refreshCustomerData(requestParameters: AccountsApiRefreshCustomerDataRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).refreshCustomerData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the given account from Finicity aggregation.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Delete Customer Account by ID
     * @param {AccountsApiRemoveByCustomerIdAndAccountIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public removeByCustomerIdAndAccountId(requestParameters: AccountsApiRemoveByCustomerIdAndAccountIdRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).removeByCustomerIdAndAccountId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove from Finicity aggregation the set of accounts matching the institution login ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Delete Customer Accounts by Institution Login ID
     * @param {AccountsApiRemoveByInstitutionLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiGenerated
     */
    public removeByInstitutionLogin(requestParameters: AccountsApiRemoveByInstitutionLoginRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).removeByInstitutionLogin(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
