/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Birthday } from '../models';
// @ts-ignore
import { Consumer } from '../models';
// @ts-ignore
import { ConsumerUpdate } from '../models';
// @ts-ignore
import { CreatedConsumer } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { NewConsumer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConsumersApi - axios parameter creator
 * @export
 */
export const ConsumersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create Consumer
         * @param {string} customerId A customer ID
         * @param {NewConsumer} newConsumer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRecord: async (customerId: string, newConsumer: NewConsumer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createConsumerRecord', 'customerId', customerId)
            // verify required parameter 'newConsumer' is not null or undefined
            assertParamExists('createConsumerRecord', 'newConsumer', newConsumer)
            const localVarPath = `/decisioning/v1/customers/{customerId}/consumer`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newConsumer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/customers/{customerId}/consumer',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newConsumer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer For Customer
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCustomerId: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getByCustomerId', 'customerId', customerId)
            const localVarPath = `/decisioning/v1/customers/{customerId}/consumer`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/customers/{customerId}/consumer',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer by ID
         * @param {string} consumerId The consumer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (consumerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            assertParamExists('getById', 'consumerId', consumerId)
            const localVarPath = `/decisioning/v1/consumers/{consumerId}`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId !== undefined ? consumerId : `-consumerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/consumers/{consumerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Consumer by ID
         * @param {string} consumerId The consumer ID
         * @param {ConsumerUpdate} consumerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyById: async (consumerId: string, consumerUpdate: ConsumerUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consumerId' is not null or undefined
            assertParamExists('modifyById', 'consumerId', consumerId)
            // verify required parameter 'consumerUpdate' is not null or undefined
            assertParamExists('modifyById', 'consumerUpdate', consumerUpdate)
            const localVarPath = `/decisioning/v1/consumers/{consumerId}`
                .replace(`{${"consumerId"}}`, encodeURIComponent(String(consumerId !== undefined ? consumerId : `-consumerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: consumerUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v1/consumers/{consumerId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(consumerUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsumersApi - functional programming interface
 * @export
 */
export const ConsumersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsumersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create Consumer
         * @param {ConsumersApiCreateConsumerRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConsumerRecord(requestParameters: ConsumersApiCreateConsumerRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedConsumer>> {
            const newConsumer: NewConsumer = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                address: requestParameters.address,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                phone: requestParameters.phone,
                ssn: requestParameters.ssn,
                birthday: requestParameters.birthday,
                email: requestParameters.email,
                suffix: requestParameters.suffix
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConsumerRecord(requestParameters.customerId, newConsumer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer For Customer
         * @param {ConsumersApiGetByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCustomerId(requestParameters: ConsumersApiGetByCustomerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Consumer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCustomerId(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer by ID
         * @param {ConsumersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ConsumersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Consumer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.consumerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Consumer by ID
         * @param {ConsumersApiModifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyById(requestParameters: ConsumersApiModifyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const consumerUpdate: ConsumerUpdate = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                address: requestParameters.address,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                phone: requestParameters.phone,
                ssn: requestParameters.ssn,
                birthday: requestParameters.birthday,
                email: requestParameters.email,
                suffix: requestParameters.suffix
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyById(requestParameters.consumerId, consumerUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsumersApi - factory interface
 * @export
 */
export const ConsumersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsumersApiFp(configuration)
    return {
        /**
         * Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create Consumer
         * @param {ConsumersApiCreateConsumerRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsumerRecord(requestParameters: ConsumersApiCreateConsumerRecordRequest, options?: AxiosRequestConfig): AxiosPromise<CreatedConsumer> {
            return localVarFp.createConsumerRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer For Customer
         * @param {ConsumersApiGetByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCustomerId(requestParameters: ConsumersApiGetByCustomerIdRequest, options?: AxiosRequestConfig): AxiosPromise<Consumer> {
            return localVarFp.getByCustomerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Consumer by ID
         * @param {ConsumersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ConsumersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Consumer> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Consumer by ID
         * @param {ConsumersApiModifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyById(requestParameters: ConsumersApiModifyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConsumerRecord operation in ConsumersApi.
 * @export
 * @interface ConsumersApiCreateConsumerRecordRequest
 */
export type ConsumersApiCreateConsumerRecordRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof ConsumersApiCreateConsumerRecord
    */
    readonly customerId: string
    
} & NewConsumer

/**
 * Request parameters for getByCustomerId operation in ConsumersApi.
 * @export
 * @interface ConsumersApiGetByCustomerIdRequest
 */
export type ConsumersApiGetByCustomerIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof ConsumersApiGetByCustomerId
    */
    readonly customerId: string
    
}

/**
 * Request parameters for getById operation in ConsumersApi.
 * @export
 * @interface ConsumersApiGetByIdRequest
 */
export type ConsumersApiGetByIdRequest = {
    
    /**
    * The consumer ID
    * @type {string}
    * @memberof ConsumersApiGetById
    */
    readonly consumerId: string
    
}

/**
 * Request parameters for modifyById operation in ConsumersApi.
 * @export
 * @interface ConsumersApiModifyByIdRequest
 */
export type ConsumersApiModifyByIdRequest = {
    
    /**
    * The consumer ID
    * @type {string}
    * @memberof ConsumersApiModifyById
    */
    readonly consumerId: string
    
} & ConsumerUpdate

/**
 * ConsumersApiGenerated - object-oriented interface
 * @export
 * @class ConsumersApiGenerated
 * @extends {BaseAPI}
 */
export class ConsumersApiGenerated extends BaseAPI {
    /**
     * Create a consumer record associated with the given customer. A consumer persists as the owner of any reports that are generated, even after the original customer is deleted from the system.  A consumer must be created for the given customer before calling any of the Generate Report services.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Create Consumer
     * @param {ConsumersApiCreateConsumerRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumersApiGenerated
     */
    public createConsumerRecord(requestParameters: ConsumersApiCreateConsumerRecordRequest, options?: AxiosRequestConfig) {
        return ConsumersApiFp(this.configuration).createConsumerRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a consumer record by customer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Consumer For Customer
     * @param {ConsumersApiGetByCustomerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumersApiGenerated
     */
    public getByCustomerId(requestParameters: ConsumersApiGetByCustomerIdRequest, options?: AxiosRequestConfig) {
        return ConsumersApiFp(this.configuration).getByCustomerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a consumer record by consumer ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Consumer by ID
     * @param {ConsumersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumersApiGenerated
     */
    public getById(requestParameters: ConsumersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ConsumersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify an existing consumer. All fields are required for a consumer record, but individual fields for this call are optional because fields that are not specified will be left unchanged.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Modify Consumer by ID
     * @param {ConsumersApiModifyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsumersApiGenerated
     */
    public modifyById(requestParameters: ConsumersApiModifyByIdRequest, options?: AxiosRequestConfig) {
        return ConsumersApiFp(this.configuration).modifyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
