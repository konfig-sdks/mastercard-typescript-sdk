/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatedCustomer } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { CustomerUpdate } from '../models';
// @ts-ignore
import { CustomerWithAppData } from '../models';
// @ts-ignore
import { Customers } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { NewCustomer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \"FinBank Billable\" profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Customer
         * @param {NewCustomer} newCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollActiveCustomer: async (newCustomer: NewCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newCustomer' is not null or undefined
            assertParamExists('enrollActiveCustomer', 'newCustomer', newCustomer)
            const localVarPath = `/aggregation/v2/customers/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newCustomer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/active',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newCustomer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing `applicationId` when creating testing customers.  Testing Customers can access FinBank profiles (except \"FinBank Billable\" profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Testing Customer
         * @param {NewCustomer} newCustomer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollTestingCustomer: async (newCustomer: NewCustomer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newCustomer' is not null or undefined
            assertParamExists('enrollTestingCustomer', 'newCustomer', newCustomer)
            const localVarPath = `/aggregation/v2/customers/testing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newCustomer,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v2/customers/testing',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newCustomer, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Find all customers enrolled by the current partner, where the search text is found in the customer\'s username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customers
         * @param {string} [username] Username for exact match (will return 0 or 1 record)
         * @param {string} [type] \&quot;testing\&quot; or \&quot;active\&quot; to return only customers of that type, or leave empty to return all customers
         * @param {string} [search] The text you wish to match. Leave this empty if you wish to return all customers. Must be URL-encoded (see: [Handling Spaces in Queries](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/)).
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEnrolledUsers: async (username?: string, type?: string, search?: string, start?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aggregation/v1/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer by ID
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getById', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer With App Data by ID
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithAppDataById: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getWithAppDataById', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/application`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/application',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify an enrolled customer by ID.  You must specify either `firstName`, `lastName`, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Customer by ID
         * @param {string} customerId A customer ID
         * @param {CustomerUpdate} customerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyById: async (customerId: string, customerUpdate: CustomerUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('modifyById', 'customerId', customerId)
            // verify required parameter 'customerUpdate' is not null or undefined
            assertParamExists('modifyById', 'customerUpdate', customerUpdate)
            const localVarPath = `/aggregation/v1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely remove a customer from the system. This will remove the customer and all associated accounts and transactions.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer by ID
         * @param {string} customerId A customer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('removeById', 'customerId', customerId)
            const localVarPath = `/aggregation/v1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration)
    return {
        /**
         * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \"FinBank Billable\" profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Customer
         * @param {CustomersApiEnrollActiveCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollActiveCustomer(requestParameters: CustomersApiEnrollActiveCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedCustomer>> {
            const newCustomer: NewCustomer = {
                username: requestParameters.username,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                applicationId: requestParameters.applicationId,
                phone: requestParameters.phone,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollActiveCustomer(newCustomer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing `applicationId` when creating testing customers.  Testing Customers can access FinBank profiles (except \"FinBank Billable\" profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Testing Customer
         * @param {CustomersApiEnrollTestingCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollTestingCustomer(requestParameters: CustomersApiEnrollTestingCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedCustomer>> {
            const newCustomer: NewCustomer = {
                username: requestParameters.username,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                applicationId: requestParameters.applicationId,
                phone: requestParameters.phone,
                email: requestParameters.email
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollTestingCustomer(newCustomer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Find all customers enrolled by the current partner, where the search text is found in the customer\'s username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customers
         * @param {CustomersApiFindEnrolledUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEnrolledUsers(requestParameters: CustomersApiFindEnrolledUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEnrolledUsers(requestParameters.username, requestParameters.type, requestParameters.search, requestParameters.start, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer by ID
         * @param {CustomersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CustomersApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer With App Data by ID
         * @param {CustomersApiGetWithAppDataByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWithAppDataById(requestParameters: CustomersApiGetWithAppDataByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerWithAppData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWithAppDataById(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify an enrolled customer by ID.  You must specify either `firstName`, `lastName`, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Customer by ID
         * @param {CustomersApiModifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyById(requestParameters: CustomersApiModifyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const customerUpdate: CustomerUpdate = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyById(requestParameters.customerId, customerUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completely remove a customer from the system. This will remove the customer and all associated accounts and transactions.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer by ID
         * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeById(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomersApiFp(configuration)
    return {
        /**
         * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \"FinBank Billable\" profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Customer
         * @param {CustomersApiEnrollActiveCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollActiveCustomer(requestParameters: CustomersApiEnrollActiveCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<CreatedCustomer> {
            return localVarFp.enrollActiveCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing `applicationId` when creating testing customers.  Testing Customers can access FinBank profiles (except \"FinBank Billable\" profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Add Testing Customer
         * @param {CustomersApiEnrollTestingCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollTestingCustomer(requestParameters: CustomersApiEnrollTestingCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<CreatedCustomer> {
            return localVarFp.enrollTestingCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Find all customers enrolled by the current partner, where the search text is found in the customer\'s username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customers
         * @param {CustomersApiFindEnrolledUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEnrolledUsers(requestParameters: CustomersApiFindEnrolledUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Customers> {
            return localVarFp.findEnrolledUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer by ID
         * @param {CustomersApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CustomersApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer With App Data by ID
         * @param {CustomersApiGetWithAppDataByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithAppDataById(requestParameters: CustomersApiGetWithAppDataByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerWithAppData> {
            return localVarFp.getWithAppDataById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an enrolled customer by ID.  You must specify either `firstName`, `lastName`, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Modify Customer by ID
         * @param {CustomersApiModifyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyById(requestParameters: CustomersApiModifyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely remove a customer from the system. This will remove the customer and all associated accounts and transactions.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
         * @summary Delete Customer by ID
         * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for enrollActiveCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiEnrollActiveCustomerRequest
 */
export type CustomersApiEnrollActiveCustomerRequest = {
    
} & NewCustomer

/**
 * Request parameters for enrollTestingCustomer operation in CustomersApi.
 * @export
 * @interface CustomersApiEnrollTestingCustomerRequest
 */
export type CustomersApiEnrollTestingCustomerRequest = {
    
} & NewCustomer

/**
 * Request parameters for findEnrolledUsers operation in CustomersApi.
 * @export
 * @interface CustomersApiFindEnrolledUsersRequest
 */
export type CustomersApiFindEnrolledUsersRequest = {
    
    /**
    * Username for exact match (will return 0 or 1 record)
    * @type {string}
    * @memberof CustomersApiFindEnrolledUsers
    */
    readonly username?: string
    
    /**
    * \"testing\" or \"active\" to return only customers of that type, or leave empty to return all customers
    * @type {string}
    * @memberof CustomersApiFindEnrolledUsers
    */
    readonly type?: string
    
    /**
    * The text you wish to match. Leave this empty if you wish to return all customers. Must be URL-encoded (see: [Handling Spaces in Queries](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/)).
    * @type {string}
    * @memberof CustomersApiFindEnrolledUsers
    */
    readonly search?: string
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof CustomersApiFindEnrolledUsers
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof CustomersApiFindEnrolledUsers
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getById operation in CustomersApi.
 * @export
 * @interface CustomersApiGetByIdRequest
 */
export type CustomersApiGetByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CustomersApiGetById
    */
    readonly customerId: string
    
}

/**
 * Request parameters for getWithAppDataById operation in CustomersApi.
 * @export
 * @interface CustomersApiGetWithAppDataByIdRequest
 */
export type CustomersApiGetWithAppDataByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CustomersApiGetWithAppDataById
    */
    readonly customerId: string
    
}

/**
 * Request parameters for modifyById operation in CustomersApi.
 * @export
 * @interface CustomersApiModifyByIdRequest
 */
export type CustomersApiModifyByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CustomersApiModifyById
    */
    readonly customerId: string
    
} & CustomerUpdate

/**
 * Request parameters for removeById operation in CustomersApi.
 * @export
 * @interface CustomersApiRemoveByIdRequest
 */
export type CustomersApiRemoveByIdRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CustomersApiRemoveById
    */
    readonly customerId: string
    
}

/**
 * CustomersApiGenerated - object-oriented interface
 * @export
 * @class CustomersApiGenerated
 * @extends {BaseAPI}
 */
export class CustomersApiGenerated extends BaseAPI {
    /**
     * Enroll an active customer, which is the actual owner of one or more real-world accounts. This is a billable customer.  Active customers must use the \"FinBank Billable\" profiles for testing purposes.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Add Customer
     * @param {CustomersApiEnrollActiveCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public enrollActiveCustomer(requestParameters: CustomersApiEnrollActiveCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).enrollActiveCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enroll a testing customer (Test Drive accounts).  For using testing customers with FinBank OAuth, you must register a test application with your systems engineer or account manager. Then, use that testing `applicationId` when creating testing customers.  Testing Customers can access FinBank profiles (except \"FinBank Billable\" profiles), and cannot access live financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Add Testing Customer
     * @param {CustomersApiEnrollTestingCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public enrollTestingCustomer(requestParameters: CustomersApiEnrollTestingCustomerRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).enrollTestingCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Find all customers enrolled by the current partner, where the search text is found in the customer\'s username or any combination of `firstName` and `lastName` fields. If no search text is provided, all customers will be returned.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customers
     * @param {CustomersApiFindEnrolledUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public findEnrolledUsers(requestParameters: CustomersApiFindEnrolledUsersRequest = {}, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).findEnrolledUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a customer by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer by ID
     * @param {CustomersApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public getById(requestParameters: CustomersApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a customer along with additional details about the OAuth application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer With App Data by ID
     * @param {CustomersApiGetWithAppDataByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public getWithAppDataById(requestParameters: CustomersApiGetWithAppDataByIdRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).getWithAppDataById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify an enrolled customer by ID.  You must specify either `firstName`, `lastName`, or both in the request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Modify Customer by ID
     * @param {CustomersApiModifyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public modifyById(requestParameters: CustomersApiModifyByIdRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).modifyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely remove a customer from the system. This will remove the customer and all associated accounts and transactions.  ⚠️ Use this service carefully! It will not pause for confirmation before performing the operation!  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)
     * @summary Delete Customer by ID
     * @param {CustomersApiRemoveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApiGenerated
     */
    public removeById(requestParameters: CustomersApiRemoveByIdRequest, options?: AxiosRequestConfig) {
        return CustomersApiFp(this.configuration).removeById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
