/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { PrequalificationReportAck } from '../models';
// @ts-ignore
import { PrequalificationReportConstraints } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
// @ts-ignore
import { VOAReportAck } from '../models';
// @ts-ignore
import { VOAReportConstraints } from '../models';
// @ts-ignore
import { VOAWithIncomeReportAck } from '../models';
// @ts-ignore
import { VOAWithIncomeReportConstraints } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VerifyAssetsApi - axios parameter creator
 * @export
 */
export const VerifyAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA Report
         * @param {string} customerId A customer ID
         * @param {VOAReportConstraints} vOAReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerVOAReport: async (customerId: string, vOAReportConstraints: VOAReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('customerVOAReport', 'customerId', customerId)
            // verify required parameter 'vOAReportConstraints' is not null or undefined
            assertParamExists('customerVOAReport', 'vOAReportConstraints', vOAReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voa`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOAReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voa',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOAReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA With Income Report
         * @param {string} customerId A customer ID
         * @param {VOAWithIncomeReportConstraints} vOAWithIncomeReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOAWithIncomeReport: async (customerId: string, vOAWithIncomeReportConstraints: VOAWithIncomeReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateVOAWithIncomeReport', 'customerId', customerId)
            // verify required parameter 'vOAWithIncomeReportConstraints' is not null or undefined
            assertParamExists('generateVOAWithIncomeReport', 'vOAWithIncomeReportConstraints', vOAWithIncomeReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/voaHistory`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: vOAWithIncomeReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/voaHistory',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(vOAWithIncomeReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (Non-CRA) Report
         * @param {string} customerId A customer ID
         * @param {PrequalificationReportConstraints} prequalificationReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetSummary: async (customerId: string, prequalificationReportConstraints: PrequalificationReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getAssetSummary', 'customerId', customerId)
            // verify required parameter 'prequalificationReportConstraints' is not null or undefined
            assertParamExists('getAssetSummary', 'prequalificationReportConstraints', prequalificationReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/assetSummary`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prequalificationReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/assetSummary',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prequalificationReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (CRA) Report
         * @param {string} customerId A customer ID
         * @param {PrequalificationReportConstraints} prequalificationReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckingSavingsInvestmentAccounts: async (customerId: string, prequalificationReportConstraints: PrequalificationReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCheckingSavingsInvestmentAccounts', 'customerId', customerId)
            // verify required parameter 'prequalificationReportConstraints' is not null or undefined
            assertParamExists('getCheckingSavingsInvestmentAccounts', 'prequalificationReportConstraints', prequalificationReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/preQualVoa`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: prequalificationReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/preQualVoa',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(prequalificationReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifyAssetsApi - functional programming interface
 * @export
 */
export const VerifyAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifyAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA Report
         * @param {VerifyAssetsApiCustomerVOAReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerVOAReport(requestParameters: VerifyAssetsApiCustomerVOAReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOAReportAck>> {
            const vOAReportConstraints: VOAReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerVOAReport(requestParameters.customerId, vOAReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA With Income Report
         * @param {VerifyAssetsApiGenerateVOAWithIncomeReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVOAWithIncomeReport(requestParameters: VerifyAssetsApiGenerateVOAWithIncomeReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOAWithIncomeReportAck>> {
            const vOAWithIncomeReportConstraints: VOAWithIncomeReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateVOAWithIncomeReport(requestParameters.customerId, vOAWithIncomeReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (Non-CRA) Report
         * @param {VerifyAssetsApiGetAssetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetSummary(requestParameters: VerifyAssetsApiGetAssetSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrequalificationReportAck>> {
            const prequalificationReportConstraints: PrequalificationReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetSummary(requestParameters.customerId, prequalificationReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (CRA) Report
         * @param {VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckingSavingsInvestmentAccounts(requestParameters: VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrequalificationReportAck>> {
            const prequalificationReportConstraints: PrequalificationReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckingSavingsInvestmentAccounts(requestParameters.customerId, prequalificationReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerifyAssetsApi - factory interface
 * @export
 */
export const VerifyAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifyAssetsApiFp(configuration)
    return {
        /**
         * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA Report
         * @param {VerifyAssetsApiCustomerVOAReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerVOAReport(requestParameters: VerifyAssetsApiCustomerVOAReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOAReportAck> {
            return localVarFp.customerVOAReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate VOA With Income Report
         * @param {VerifyAssetsApiGenerateVOAWithIncomeReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVOAWithIncomeReport(requestParameters: VerifyAssetsApiGenerateVOAWithIncomeReportRequest, options?: AxiosRequestConfig): AxiosPromise<VOAWithIncomeReportAck> {
            return localVarFp.generateVOAWithIncomeReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (Non-CRA) Report
         * @param {VerifyAssetsApiGetAssetSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetSummary(requestParameters: VerifyAssetsApiGetAssetSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<PrequalificationReportAck> {
            return localVarFp.getAssetSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Prequalification (CRA) Report
         * @param {VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckingSavingsInvestmentAccounts(requestParameters: VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<PrequalificationReportAck> {
            return localVarFp.getCheckingSavingsInvestmentAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customerVOAReport operation in VerifyAssetsApi.
 * @export
 * @interface VerifyAssetsApiCustomerVOAReportRequest
 */
export type VerifyAssetsApiCustomerVOAReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyAssetsApiCustomerVOAReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyAssetsApiCustomerVOAReport
    */
    readonly callbackUrl?: string
    
} & VOAReportConstraints

/**
 * Request parameters for generateVOAWithIncomeReport operation in VerifyAssetsApi.
 * @export
 * @interface VerifyAssetsApiGenerateVOAWithIncomeReportRequest
 */
export type VerifyAssetsApiGenerateVOAWithIncomeReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyAssetsApiGenerateVOAWithIncomeReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyAssetsApiGenerateVOAWithIncomeReport
    */
    readonly callbackUrl?: string
    
} & VOAWithIncomeReportConstraints

/**
 * Request parameters for getAssetSummary operation in VerifyAssetsApi.
 * @export
 * @interface VerifyAssetsApiGetAssetSummaryRequest
 */
export type VerifyAssetsApiGetAssetSummaryRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyAssetsApiGetAssetSummary
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyAssetsApiGetAssetSummary
    */
    readonly callbackUrl?: string
    
} & PrequalificationReportConstraints

/**
 * Request parameters for getCheckingSavingsInvestmentAccounts operation in VerifyAssetsApi.
 * @export
 * @interface VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest
 */
export type VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof VerifyAssetsApiGetCheckingSavingsInvestmentAccounts
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof VerifyAssetsApiGetCheckingSavingsInvestmentAccounts
    */
    readonly callbackUrl?: string
    
} & PrequalificationReportConstraints

/**
 * VerifyAssetsApiGenerated - object-oriented interface
 * @export
 * @class VerifyAssetsApiGenerated
 * @extends {BaseAPI}
 */
export class VerifyAssetsApiGenerated extends BaseAPI {
    /**
     * Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOA Report
     * @param {VerifyAssetsApiCustomerVOAReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyAssetsApiGenerated
     */
    public customerVOAReport(requestParameters: VerifyAssetsApiCustomerVOAReportRequest, options?: AxiosRequestConfig) {
        return VerifyAssetsApiFp(this.configuration).customerVOAReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate VOA With Income Report
     * @param {VerifyAssetsApiGenerateVOAWithIncomeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyAssetsApiGenerated
     */
    public generateVOAWithIncomeReport(requestParameters: VerifyAssetsApiGenerateVOAWithIncomeReportRequest, options?: AxiosRequestConfig) {
        return VerifyAssetsApiFp(this.configuration).generateVOAWithIncomeReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Prequalification (Non-CRA) Report
     * @param {VerifyAssetsApiGetAssetSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyAssetsApiGenerated
     */
    public getAssetSummary(requestParameters: VerifyAssetsApiGetAssetSummaryRequest, options?: AxiosRequestConfig) {
        return VerifyAssetsApiFp(this.configuration).getAssetSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Prequalification (CRA) Report
     * @param {VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyAssetsApiGenerated
     */
    public getCheckingSavingsInvestmentAccounts(requestParameters: VerifyAssetsApiGetCheckingSavingsInvestmentAccountsRequest, options?: AxiosRequestConfig) {
        return VerifyAssetsApiFp(this.configuration).getCheckingSavingsInvestmentAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
