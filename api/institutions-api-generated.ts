/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BrandingWrapper } from '../models';
// @ts-ignore
import { CertifiedInstitutions } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { InstitutionWrapper } from '../models';
// @ts-ignore
import { Institutions } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InstitutionsApi - axios parameter creator
 * @export
 */
export const InstitutionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution Branding by ID
         * @param {number} institutionId The institution ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingById: async (institutionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionId' is not null or undefined
            assertParamExists('getBrandingById', 'institutionId', institutionId)
            const localVarPath = `/institution/v2/institutions/{institutionId}/branding`
                .replace(`{${"institutionId"}}`, encodeURIComponent(String(institutionId !== undefined ? institutionId : `-institutionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/institution/v2/institutions/{institutionId}/branding',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution by ID
         * @param {number} institutionId The institution ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdDetails: async (institutionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'institutionId' is not null or undefined
            assertParamExists('getByIdDetails', 'institutionId', institutionId)
            const localVarPath = `/institution/v2/institutions/{institutionId}`
                .replace(`{${"institutionId"}}`, encodeURIComponent(String(institutionId !== undefined ? institutionId : `-institutionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/institution/v2/institutions/{institutionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions With RSSD
         * @param {string} [search] Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {string} [type] A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
         * @param {Array<string>} [supportedCountries] A list of country codes, \&#39;*\&#39; for all countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifiedInstitutionsWithRssd: async (search?: string, start?: number, limit?: number, type?: string, supportedCountries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/institution/v2/certifiedInstitutions/rssd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (supportedCountries) {
                localVarQueryParameter['supportedCountries'] = supportedCountries.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/institution/v2/certifiedInstitutions/rssd',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions
         * @param {string} [search] Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {string} [type] A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
         * @param {Array<string>} [supportedCountries] A list of country codes, \&#39;*\&#39; for all countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCertifiedInstitutions: async (search?: string, start?: number, limit?: number, type?: string, supportedCountries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/institution/v2/certifiedInstitutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (supportedCountries) {
                localVarQueryParameter['supportedCountries'] = supportedCountries.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/institution/v2/certifiedInstitutions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institutions
         * @param {string} [search] Search term (financial institution &#x60;name&#x60; field). Leave empty for all FIs.
         * @param {number} [start] Index of the page of results to return
         * @param {number} [limit] Maximum number of results per page
         * @param {string} [type] A product type: \&quot;transAgg\&quot;, \&quot;ach\&quot;, \&quot;stateAgg\&quot;, \&quot;voi\&quot;, \&quot;voa\&quot;, \&quot;aha\&quot;, \&quot;availBalance\&quot;, \&quot;accountOwner\&quot;
         * @param {Array<string>} [supportedCountries] A list of country codes, \&#39;*\&#39; for all countries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFinancialInstitutions: async (search?: string, start?: number, limit?: number, type?: string, supportedCountries?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/institution/v2/institutions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (supportedCountries) {
                localVarQueryParameter['supportedCountries'] = supportedCountries.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/institution/v2/institutions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionsApi - functional programming interface
 * @export
 */
export const InstitutionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstitutionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution Branding by ID
         * @param {InstitutionsApiGetBrandingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandingById(requestParameters: InstitutionsApiGetBrandingByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandingWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandingById(requestParameters.institutionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution by ID
         * @param {InstitutionsApiGetByIdDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByIdDetails(requestParameters: InstitutionsApiGetByIdDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstitutionWrapper>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByIdDetails(requestParameters.institutionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions With RSSD
         * @param {InstitutionsApiGetCertifiedInstitutionsWithRssdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCertifiedInstitutionsWithRssd(requestParameters: InstitutionsApiGetCertifiedInstitutionsWithRssdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedInstitutions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCertifiedInstitutionsWithRssd(requestParameters.search, requestParameters.start, requestParameters.limit, requestParameters.type, requestParameters.supportedCountries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions
         * @param {InstitutionsApiListCertifiedInstitutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCertifiedInstitutions(requestParameters: InstitutionsApiListCertifiedInstitutionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedInstitutions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCertifiedInstitutions(requestParameters.search, requestParameters.start, requestParameters.limit, requestParameters.type, requestParameters.supportedCountries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institutions
         * @param {InstitutionsApiSearchFinancialInstitutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFinancialInstitutions(requestParameters: InstitutionsApiSearchFinancialInstitutionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Institutions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFinancialInstitutions(requestParameters.search, requestParameters.start, requestParameters.limit, requestParameters.type, requestParameters.supportedCountries, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstitutionsApi - factory interface
 * @export
 */
export const InstitutionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstitutionsApiFp(configuration)
    return {
        /**
         * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution Branding by ID
         * @param {InstitutionsApiGetBrandingByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandingById(requestParameters: InstitutionsApiGetBrandingByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BrandingWrapper> {
            return localVarFp.getBrandingById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institution by ID
         * @param {InstitutionsApiGetByIdDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByIdDetails(requestParameters: InstitutionsApiGetByIdDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<InstitutionWrapper> {
            return localVarFp.getByIdDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions With RSSD
         * @param {InstitutionsApiGetCertifiedInstitutionsWithRssdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCertifiedInstitutionsWithRssd(requestParameters: InstitutionsApiGetCertifiedInstitutionsWithRssdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CertifiedInstitutions> {
            return localVarFp.getCertifiedInstitutionsWithRssd(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Certified Institutions
         * @param {InstitutionsApiListCertifiedInstitutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCertifiedInstitutions(requestParameters: InstitutionsApiListCertifiedInstitutionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CertifiedInstitutions> {
            return localVarFp.listCertifiedInstitutions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Institutions
         * @param {InstitutionsApiSearchFinancialInstitutionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFinancialInstitutions(requestParameters: InstitutionsApiSearchFinancialInstitutionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Institutions> {
            return localVarFp.searchFinancialInstitutions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBrandingById operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiGetBrandingByIdRequest
 */
export type InstitutionsApiGetBrandingByIdRequest = {
    
    /**
    * The institution ID
    * @type {number}
    * @memberof InstitutionsApiGetBrandingById
    */
    readonly institutionId: number
    
}

/**
 * Request parameters for getByIdDetails operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiGetByIdDetailsRequest
 */
export type InstitutionsApiGetByIdDetailsRequest = {
    
    /**
    * The institution ID
    * @type {number}
    * @memberof InstitutionsApiGetByIdDetails
    */
    readonly institutionId: number
    
}

/**
 * Request parameters for getCertifiedInstitutionsWithRssd operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiGetCertifiedInstitutionsWithRssdRequest
 */
export type InstitutionsApiGetCertifiedInstitutionsWithRssdRequest = {
    
    /**
    * Search term (financial institution `name` field). Leave empty for all FIs.
    * @type {string}
    * @memberof InstitutionsApiGetCertifiedInstitutionsWithRssd
    */
    readonly search?: string
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof InstitutionsApiGetCertifiedInstitutionsWithRssd
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof InstitutionsApiGetCertifiedInstitutionsWithRssd
    */
    readonly limit?: number
    
    /**
    * A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\"
    * @type {string}
    * @memberof InstitutionsApiGetCertifiedInstitutionsWithRssd
    */
    readonly type?: string
    
    /**
    * A list of country codes, \'*\' for all countries.
    * @type {Array<string>}
    * @memberof InstitutionsApiGetCertifiedInstitutionsWithRssd
    */
    readonly supportedCountries?: Array<string>
    
}

/**
 * Request parameters for listCertifiedInstitutions operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiListCertifiedInstitutionsRequest
 */
export type InstitutionsApiListCertifiedInstitutionsRequest = {
    
    /**
    * Search term (financial institution `name` field). Leave empty for all FIs.
    * @type {string}
    * @memberof InstitutionsApiListCertifiedInstitutions
    */
    readonly search?: string
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof InstitutionsApiListCertifiedInstitutions
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof InstitutionsApiListCertifiedInstitutions
    */
    readonly limit?: number
    
    /**
    * A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\"
    * @type {string}
    * @memberof InstitutionsApiListCertifiedInstitutions
    */
    readonly type?: string
    
    /**
    * A list of country codes, \'*\' for all countries.
    * @type {Array<string>}
    * @memberof InstitutionsApiListCertifiedInstitutions
    */
    readonly supportedCountries?: Array<string>
    
}

/**
 * Request parameters for searchFinancialInstitutions operation in InstitutionsApi.
 * @export
 * @interface InstitutionsApiSearchFinancialInstitutionsRequest
 */
export type InstitutionsApiSearchFinancialInstitutionsRequest = {
    
    /**
    * Search term (financial institution `name` field). Leave empty for all FIs.
    * @type {string}
    * @memberof InstitutionsApiSearchFinancialInstitutions
    */
    readonly search?: string
    
    /**
    * Index of the page of results to return
    * @type {number}
    * @memberof InstitutionsApiSearchFinancialInstitutions
    */
    readonly start?: number
    
    /**
    * Maximum number of results per page
    * @type {number}
    * @memberof InstitutionsApiSearchFinancialInstitutions
    */
    readonly limit?: number
    
    /**
    * A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\"
    * @type {string}
    * @memberof InstitutionsApiSearchFinancialInstitutions
    */
    readonly type?: string
    
    /**
    * A list of country codes, \'*\' for all countries.
    * @type {Array<string>}
    * @memberof InstitutionsApiSearchFinancialInstitutions
    */
    readonly supportedCountries?: Array<string>
    
}

/**
 * InstitutionsApiGenerated - object-oriented interface
 * @export
 * @class InstitutionsApiGenerated
 * @extends {BaseAPI}
 */
export class InstitutionsApiGenerated extends BaseAPI {
    /**
     * Return the branding information for a financial institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Institution Branding by ID
     * @param {InstitutionsApiGetBrandingByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiGenerated
     */
    public getBrandingById(requestParameters: InstitutionsApiGetBrandingByIdRequest, options?: AxiosRequestConfig) {
        return InstitutionsApiFp(this.configuration).getBrandingById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get financial institution details by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Institution by ID
     * @param {InstitutionsApiGetByIdDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiGenerated
     */
    public getByIdDetails(requestParameters: InstitutionsApiGetByIdDetailsRequest, options?: AxiosRequestConfig) {
        return InstitutionsApiFp(this.configuration).getByIdDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for certified financial institutions w/RSSD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Certified Institutions With RSSD
     * @param {InstitutionsApiGetCertifiedInstitutionsWithRssdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiGenerated
     */
    public getCertifiedInstitutionsWithRssd(requestParameters: InstitutionsApiGetCertifiedInstitutionsWithRssdRequest = {}, options?: AxiosRequestConfig) {
        return InstitutionsApiFp(this.configuration).getCertifiedInstitutionsWithRssd(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for financial institutions by certified product.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Certified Institutions
     * @param {InstitutionsApiListCertifiedInstitutionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiGenerated
     */
    public listCertifiedInstitutions(requestParameters: InstitutionsApiListCertifiedInstitutionsRequest = {}, options?: AxiosRequestConfig) {
        return InstitutionsApiFp(this.configuration).listCertifiedInstitutions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for financial institutions.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Institutions
     * @param {InstitutionsApiSearchFinancialInstitutionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionsApiGenerated
     */
    public searchFinancialInstitutions(requestParameters: InstitutionsApiSearchFinancialInstitutionsRequest = {}, options?: AxiosRequestConfig) {
        return InstitutionsApiFp(this.configuration).searchFinancialInstitutions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
