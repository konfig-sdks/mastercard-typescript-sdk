/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CashFlowReportAck } from '../models';
// @ts-ignore
import { CashFlowReportConstraints } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CashFlowApi - axios parameter creator
 * @export
 */
export const CashFlowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Personal
         * @param {string} customerId A customer ID
         * @param {CashFlowReportConstraints} cashFlowReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePersonalReport: async (customerId: string, cashFlowReportConstraints: CashFlowReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generatePersonalReport', 'customerId', customerId)
            // verify required parameter 'cashFlowReportConstraints' is not null or undefined
            assertParamExists('generatePersonalReport', 'cashFlowReportConstraints', cashFlowReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/cashFlowPersonal`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cashFlowReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/cashFlowPersonal',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cashFlowReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Business
         * @param {string} customerId A customer ID
         * @param {CashFlowReportConstraints} cashFlowReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportBusiness: async (customerId: string, cashFlowReportConstraints: CashFlowReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateReportBusiness', 'customerId', customerId)
            // verify required parameter 'cashFlowReportConstraints' is not null or undefined
            assertParamExists('generateReportBusiness', 'cashFlowReportConstraints', cashFlowReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/cashFlowBusiness`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cashFlowReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/cashFlowBusiness',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cashFlowReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CashFlowApi - functional programming interface
 * @export
 */
export const CashFlowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CashFlowApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Personal
         * @param {CashFlowApiGeneratePersonalReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePersonalReport(requestParameters: CashFlowApiGeneratePersonalReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportAck>> {
            const cashFlowReportConstraints: CashFlowReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePersonalReport(requestParameters.customerId, cashFlowReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Business
         * @param {CashFlowApiGenerateReportBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReportBusiness(requestParameters: CashFlowApiGenerateReportBusinessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CashFlowReportAck>> {
            const cashFlowReportConstraints: CashFlowReportConstraints = {
                accountIds: requestParameters.accountIds,
                reportCustomFields: requestParameters.reportCustomFields,
                showNsf: requestParameters.showNsf,
                fromDate: requestParameters.fromDate,
                incomeStreamConfidenceMinimum: requestParameters.incomeStreamConfidenceMinimum
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReportBusiness(requestParameters.customerId, cashFlowReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CashFlowApi - factory interface
 * @export
 */
export const CashFlowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CashFlowApiFp(configuration)
    return {
        /**
         * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Personal
         * @param {CashFlowApiGeneratePersonalReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePersonalReport(requestParameters: CashFlowApiGeneratePersonalReportRequest, options?: AxiosRequestConfig): AxiosPromise<CashFlowReportAck> {
            return localVarFp.generatePersonalReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Cash Flow Report - Business
         * @param {CashFlowApiGenerateReportBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReportBusiness(requestParameters: CashFlowApiGenerateReportBusinessRequest, options?: AxiosRequestConfig): AxiosPromise<CashFlowReportAck> {
            return localVarFp.generateReportBusiness(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generatePersonalReport operation in CashFlowApi.
 * @export
 * @interface CashFlowApiGeneratePersonalReportRequest
 */
export type CashFlowApiGeneratePersonalReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CashFlowApiGeneratePersonalReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof CashFlowApiGeneratePersonalReport
    */
    readonly callbackUrl?: string
    
} & CashFlowReportConstraints

/**
 * Request parameters for generateReportBusiness operation in CashFlowApi.
 * @export
 * @interface CashFlowApiGenerateReportBusinessRequest
 */
export type CashFlowApiGenerateReportBusinessRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof CashFlowApiGenerateReportBusiness
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof CashFlowApiGenerateReportBusiness
    */
    readonly callbackUrl?: string
    
} & CashFlowReportConstraints

/**
 * CashFlowApiGenerated - object-oriented interface
 * @export
 * @class CashFlowApiGenerated
 * @extends {BaseAPI}
 */
export class CashFlowApiGenerated extends BaseAPI {
    /**
     * Generate a Cash Flow Report (Personal) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report.  This report is provided under FCRA rules, with Finicity acting as the CRA (Consumer Reporting Agency). If an individual account is included in the report - for example, with an individual acting as an personal guarantor on the loan - then this version of the report should be used. In case of an adverse action on the loan where the decision was based on this report, then the borrower can be referred to the [Finicity Consumer Portal](https://consumer.finicityreports.com) where they can view this report and submit a dispute if they feel any information in this report is inaccurate.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Cash Flow Report - Personal
     * @param {CashFlowApiGeneratePersonalReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApiGenerated
     */
    public generatePersonalReport(requestParameters: CashFlowApiGeneratePersonalReportRequest, options?: AxiosRequestConfig) {
        return CashFlowApiFp(this.configuration).generatePersonalReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a Cash Flow Report (Business) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given account. It then uses this information to generate the CFR report. A consumer is not required to generate this report.  This report is not provided under FCRA rules, and this report is not available in the Finicity Consumer Portal for the borrower to view.  If no account type of checking or savings is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Cash Flow Report - Business
     * @param {CashFlowApiGenerateReportBusinessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CashFlowApiGenerated
     */
    public generateReportBusiness(requestParameters: CashFlowApiGenerateReportBusinessRequest, options?: AxiosRequestConfig) {
        return CashFlowApiFp(this.configuration).generateReportBusiness(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
