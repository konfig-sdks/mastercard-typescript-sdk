/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { InitiatedMicroDeposit } from '../models';
// @ts-ignore
import { MicroDepositDetails } from '../models';
// @ts-ignore
import { MicroDepositInitiation } from '../models';
// @ts-ignore
import { MicroDepositVerification } from '../models';
// @ts-ignore
import { MicroDepositVerificationError } from '../models';
// @ts-ignore
import { Receiver } from '../models';
// @ts-ignore
import { VerifiedMicroDeposit } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountValidationAssistanceApi - axios parameter creator
 * @export
 */
export const AccountValidationAssistanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch the micro entries details. `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Micro Entries Details
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMicroEntriesDetails: async (customerId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getMicroEntriesDetails', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getMicroEntriesDetails', 'accountId', accountId)
            const localVarPath = `/microentry/v1/customers/{customerId}/accounts/{accountId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/microentry/v1/customers/{customerId}/accounts/{accountId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiate the micro entries to customer\'s account.  Two random micro amounts less than a dollar each will be deposited to provided customer\'s account.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Initiate Micro Entries
         * @param {string} customerId A customer ID
         * @param {MicroDepositInitiation} microDepositInitiation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateMicroEntries: async (customerId: string, microDepositInitiation: MicroDepositInitiation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('initiateMicroEntries', 'customerId', customerId)
            // verify required parameter 'microDepositInitiation' is not null or undefined
            assertParamExists('initiateMicroEntries', 'microDepositInitiation', microDepositInitiation)
            const localVarPath = `/microentry/v1/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: microDepositInitiation,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/microentry/v1/customers/{customerId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(microDepositInitiation, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the micro entries as received by customer in customer\'s account. Customer needs to verify the micro amounts received in customer\'s account. `customerId` and `accountId` are the identifiers of the customer and account  receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Verify Micro Entries
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {MicroDepositVerification} microDepositVerification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroEntries: async (customerId: string, accountId: string, microDepositVerification: MicroDepositVerification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('verifyMicroEntries', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('verifyMicroEntries', 'accountId', accountId)
            // verify required parameter 'microDepositVerification' is not null or undefined
            assertParamExists('verifyMicroEntries', 'microDepositVerification', microDepositVerification)
            const localVarPath = `/microentry/v1/customers/{customerId}/accounts/{accountId}/amounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: microDepositVerification,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/microentry/v1/customers/{customerId}/accounts/{accountId}/amounts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(microDepositVerification, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountValidationAssistanceApi - functional programming interface
 * @export
 */
export const AccountValidationAssistanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountValidationAssistanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch the micro entries details. `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Micro Entries Details
         * @param {AccountValidationAssistanceApiGetMicroEntriesDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMicroEntriesDetails(requestParameters: AccountValidationAssistanceApiGetMicroEntriesDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MicroDepositDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMicroEntriesDetails(requestParameters.customerId, requestParameters.accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiate the micro entries to customer\'s account.  Two random micro amounts less than a dollar each will be deposited to provided customer\'s account.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Initiate Micro Entries
         * @param {AccountValidationAssistanceApiInitiateMicroEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateMicroEntries(requestParameters: AccountValidationAssistanceApiInitiateMicroEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiatedMicroDeposit>> {
            const microDepositInitiation: MicroDepositInitiation = {
                institutionLoginId: requestParameters.institutionLoginId,
                receiver: requestParameters.receiver,
                callbackUrl: requestParameters.callbackUrl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateMicroEntries(requestParameters.customerId, microDepositInitiation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify the micro entries as received by customer in customer\'s account. Customer needs to verify the micro amounts received in customer\'s account. `customerId` and `accountId` are the identifiers of the customer and account  receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Verify Micro Entries
         * @param {AccountValidationAssistanceApiVerifyMicroEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyMicroEntries(requestParameters: AccountValidationAssistanceApiVerifyMicroEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifiedMicroDeposit>> {
            const microDepositVerification: MicroDepositVerification = {
                amounts: requestParameters.amounts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyMicroEntries(requestParameters.customerId, requestParameters.accountId, microDepositVerification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountValidationAssistanceApi - factory interface
 * @export
 */
export const AccountValidationAssistanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountValidationAssistanceApiFp(configuration)
    return {
        /**
         * Fetch the micro entries details. `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Micro Entries Details
         * @param {AccountValidationAssistanceApiGetMicroEntriesDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMicroEntriesDetails(requestParameters: AccountValidationAssistanceApiGetMicroEntriesDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<MicroDepositDetails> {
            return localVarFp.getMicroEntriesDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiate the micro entries to customer\'s account.  Two random micro amounts less than a dollar each will be deposited to provided customer\'s account.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Initiate Micro Entries
         * @param {AccountValidationAssistanceApiInitiateMicroEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateMicroEntries(requestParameters: AccountValidationAssistanceApiInitiateMicroEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<InitiatedMicroDeposit> {
            return localVarFp.initiateMicroEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the micro entries as received by customer in customer\'s account. Customer needs to verify the micro amounts received in customer\'s account. `customerId` and `accountId` are the identifiers of the customer and account  receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Verify Micro Entries
         * @param {AccountValidationAssistanceApiVerifyMicroEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyMicroEntries(requestParameters: AccountValidationAssistanceApiVerifyMicroEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<VerifiedMicroDeposit> {
            return localVarFp.verifyMicroEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMicroEntriesDetails operation in AccountValidationAssistanceApi.
 * @export
 * @interface AccountValidationAssistanceApiGetMicroEntriesDetailsRequest
 */
export type AccountValidationAssistanceApiGetMicroEntriesDetailsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountValidationAssistanceApiGetMicroEntriesDetails
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof AccountValidationAssistanceApiGetMicroEntriesDetails
    */
    readonly accountId: string
    
}

/**
 * Request parameters for initiateMicroEntries operation in AccountValidationAssistanceApi.
 * @export
 * @interface AccountValidationAssistanceApiInitiateMicroEntriesRequest
 */
export type AccountValidationAssistanceApiInitiateMicroEntriesRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountValidationAssistanceApiInitiateMicroEntries
    */
    readonly customerId: string
    
} & MicroDepositInitiation

/**
 * Request parameters for verifyMicroEntries operation in AccountValidationAssistanceApi.
 * @export
 * @interface AccountValidationAssistanceApiVerifyMicroEntriesRequest
 */
export type AccountValidationAssistanceApiVerifyMicroEntriesRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof AccountValidationAssistanceApiVerifyMicroEntries
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof AccountValidationAssistanceApiVerifyMicroEntries
    */
    readonly accountId: string
    
} & MicroDepositVerification

/**
 * AccountValidationAssistanceApiGenerated - object-oriented interface
 * @export
 * @class AccountValidationAssistanceApiGenerated
 * @extends {BaseAPI}
 */
export class AccountValidationAssistanceApiGenerated extends BaseAPI {
    /**
     * Fetch the micro entries details. `customerId` and `accountId` are the identifiers of the customer and account receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Micro Entries Details
     * @param {AccountValidationAssistanceApiGetMicroEntriesDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountValidationAssistanceApiGenerated
     */
    public getMicroEntriesDetails(requestParameters: AccountValidationAssistanceApiGetMicroEntriesDetailsRequest, options?: AxiosRequestConfig) {
        return AccountValidationAssistanceApiFp(this.configuration).getMicroEntriesDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiate the micro entries to customer\'s account.  Two random micro amounts less than a dollar each will be deposited to provided customer\'s account.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Initiate Micro Entries
     * @param {AccountValidationAssistanceApiInitiateMicroEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountValidationAssistanceApiGenerated
     */
    public initiateMicroEntries(requestParameters: AccountValidationAssistanceApiInitiateMicroEntriesRequest, options?: AxiosRequestConfig) {
        return AccountValidationAssistanceApiFp(this.configuration).initiateMicroEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify the micro entries as received by customer in customer\'s account. Customer needs to verify the micro amounts received in customer\'s account. `customerId` and `accountId` are the identifiers of the customer and account  receiving the micro entries.    _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Verify Micro Entries
     * @param {AccountValidationAssistanceApiVerifyMicroEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountValidationAssistanceApiGenerated
     */
    public verifyMicroEntries(requestParameters: AccountValidationAssistanceApiVerifyMicroEntriesRequest, options?: AxiosRequestConfig) {
        return AccountValidationAssistanceApiFp(this.configuration).verifyMicroEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
