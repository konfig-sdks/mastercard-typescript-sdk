/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Business } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { NewAddress } from '../models';
// @ts-ignore
import { NewBusiness } from '../models';
// @ts-ignore
import { PhoneNumberFormat } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BusinessesApiApi - axios parameter creator
 * @export
 */
export const BusinessesApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create a New Business for a Customer
         * @param {string} customerId Unique identifier of the customer
         * @param {NewBusiness} newBusiness 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBusiness: async (customerId: string, newBusiness: NewBusiness, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createNewBusiness', 'customerId', customerId)
            // verify required parameter 'newBusiness' is not null or undefined
            assertParamExists('createNewBusiness', 'newBusiness', newBusiness)
            const localVarPath = `/business-services/customers/{customer_id}/businesses`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newBusiness,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-services/customers/{customer_id}/businesses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newBusiness, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Business for Customer
         * @param {string} customerId Unique identifier of the customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByCustomerId: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getDetailsByCustomerId', 'customerId', customerId)
            const localVarPath = `/business-services/customers/{customer_id}/businesses`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-services/customers/{customer_id}/businesses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
         * @summary Get Business by ID
         * @param {string} customerId Unique identifier of the customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById: async (customerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getDetailsById', 'customerId', customerId)
            const localVarPath = `/business-services/businesses/{business_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-services/businesses/{business_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business\'s profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Update Business by ID
         * @param {string} customerId Unique identifier of the customer
         * @param {NewBusiness} newBusiness 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (customerId: string, newBusiness: NewBusiness, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('updateById', 'customerId', customerId)
            // verify required parameter 'newBusiness' is not null or undefined
            assertParamExists('updateById', 'newBusiness', newBusiness)
            const localVarPath = `/business-services/businesses/{business_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customer_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newBusiness,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-services/businesses/{business_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newBusiness, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessesApiApi - functional programming interface
 * @export
 */
export const BusinessesApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessesApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create a New Business for a Customer
         * @param {BusinessesApiApiCreateNewBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewBusiness(requestParameters: BusinessesApiApiCreateNewBusinessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Business>> {
            const newBusiness: NewBusiness = {
                name: requestParameters.name,
                personallyLiable: requestParameters.personallyLiable,
                address: requestParameters.address,
                phoneNumber: requestParameters.phoneNumber,
                url: requestParameters.url,
                email: requestParameters.email,
                type: requestParameters.type,
                taxId: requestParameters.taxId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewBusiness(requestParameters.customerId, newBusiness, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Business for Customer
         * @param {BusinessesApiApiGetDetailsByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsByCustomerId(requestParameters: BusinessesApiApiGetDetailsByCustomerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Business>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsByCustomerId(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
         * @summary Get Business by ID
         * @param {BusinessesApiApiGetDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetailsById(requestParameters: BusinessesApiApiGetDetailsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Business>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetailsById(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business\'s profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Update Business by ID
         * @param {BusinessesApiApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: BusinessesApiApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Business>> {
            const newBusiness: NewBusiness = {
                name: requestParameters.name,
                personallyLiable: requestParameters.personallyLiable,
                address: requestParameters.address,
                phoneNumber: requestParameters.phoneNumber,
                url: requestParameters.url,
                email: requestParameters.email,
                type: requestParameters.type,
                taxId: requestParameters.taxId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.customerId, newBusiness, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessesApiApi - factory interface
 * @export
 */
export const BusinessesApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessesApiApiFp(configuration)
    return {
        /**
         * Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Create a New Business for a Customer
         * @param {BusinessesApiApiCreateNewBusinessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBusiness(requestParameters: BusinessesApiApiCreateNewBusinessRequest, options?: AxiosRequestConfig): AxiosPromise<Business> {
            return localVarFp.createNewBusiness(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Business for Customer
         * @param {BusinessesApiApiGetDetailsByCustomerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByCustomerId(requestParameters: BusinessesApiApiGetDetailsByCustomerIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Business>> {
            return localVarFp.getDetailsByCustomerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
         * @summary Get Business by ID
         * @param {BusinessesApiApiGetDetailsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsById(requestParameters: BusinessesApiApiGetDetailsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Business>> {
            return localVarFp.getDetailsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business\'s profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Update Business by ID
         * @param {BusinessesApiApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: BusinessesApiApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Business> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewBusiness operation in BusinessesApiApi.
 * @export
 * @interface BusinessesApiApiCreateNewBusinessRequest
 */
export type BusinessesApiApiCreateNewBusinessRequest = {
    
    /**
    * Unique identifier of the customer
    * @type {string}
    * @memberof BusinessesApiApiCreateNewBusiness
    */
    readonly customerId: string
    
} & NewBusiness

/**
 * Request parameters for getDetailsByCustomerId operation in BusinessesApiApi.
 * @export
 * @interface BusinessesApiApiGetDetailsByCustomerIdRequest
 */
export type BusinessesApiApiGetDetailsByCustomerIdRequest = {
    
    /**
    * Unique identifier of the customer
    * @type {string}
    * @memberof BusinessesApiApiGetDetailsByCustomerId
    */
    readonly customerId: string
    
}

/**
 * Request parameters for getDetailsById operation in BusinessesApiApi.
 * @export
 * @interface BusinessesApiApiGetDetailsByIdRequest
 */
export type BusinessesApiApiGetDetailsByIdRequest = {
    
    /**
    * Unique identifier of the customer
    * @type {string}
    * @memberof BusinessesApiApiGetDetailsById
    */
    readonly customerId: string
    
}

/**
 * Request parameters for updateById operation in BusinessesApiApi.
 * @export
 * @interface BusinessesApiApiUpdateByIdRequest
 */
export type BusinessesApiApiUpdateByIdRequest = {
    
    /**
    * Unique identifier of the customer
    * @type {string}
    * @memberof BusinessesApiApiUpdateById
    */
    readonly customerId: string
    
} & NewBusiness

/**
 * BusinessesApiApiGenerated - object-oriented interface
 * @export
 * @class BusinessesApiApiGenerated
 * @extends {BaseAPI}
 */
export class BusinessesApiApiGenerated extends BaseAPI {
    /**
     * Create a new business record for the associated customer. A customer can have one business record associated.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Create a New Business for a Customer
     * @param {BusinessesApiApiCreateNewBusinessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApiApiGenerated
     */
    public createNewBusiness(requestParameters: BusinessesApiApiCreateNewBusinessRequest, options?: AxiosRequestConfig) {
        return BusinessesApiApiFp(this.configuration).createNewBusiness(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve business details associated with a specific customer. By providing the unique customer identifier, details about the associated business can be accessed.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Business for Customer
     * @param {BusinessesApiApiGetDetailsByCustomerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApiApiGenerated
     */
    public getDetailsByCustomerId(requestParameters: BusinessesApiApiGetDetailsByCustomerIdRequest, options?: AxiosRequestConfig) {
        return BusinessesApiApiFp(this.configuration).getDetailsByCustomerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve business details.  _Supported regions_: ![\\U0001F1FA\\U0001F1F8](https://flagcdn.com/20x15/us.png)
     * @summary Get Business by ID
     * @param {BusinessesApiApiGetDetailsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApiApiGenerated
     */
    public getDetailsById(requestParameters: BusinessesApiApiGetDetailsByIdRequest, options?: AxiosRequestConfig) {
        return BusinessesApiApiFp(this.configuration).getDetailsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the details of a business based on its unique identifier. By providing the specific business ID and the updated information in the request, modifications can be made to the business\'s profile.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Update Business by ID
     * @param {BusinessesApiApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessesApiApiGenerated
     */
    public updateById(requestParameters: BusinessesApiApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return BusinessesApiApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
