/* tslint:disable */
/* eslint-disable */
/*
Open Banking

OpenAPI specification for Finicity APIs.

Open Banking solutions in the US are provided by Finicity, a Mastercard
company.

The version of the OpenAPI document: 1.16.0
Contact: apisupport@mastercard.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerAccountMultipleStatements } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { ReportCustomField } from '../models';
// @ts-ignore
import { StatementData } from '../models';
// @ts-ignore
import { StatementReportAck } from '../models';
// @ts-ignore
import { StatementReportConstraints } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BankStatementsApi - axios parameter creator
 * @export
 */
export const BankStatementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Statement Report
         * @param {string} customerId A customer ID
         * @param {StatementReportConstraints} statementReportConstraints 
         * @param {string} [callbackUrl] A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport: async (customerId: string, statementReportConstraints: StatementReportConstraints, callbackUrl?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('generateReport', 'customerId', customerId)
            // verify required parameter 'statementReportConstraints' is not null or undefined
            assertParamExists('generateReport', 'statementReportConstraints', statementReportConstraints)
            const localVarPath = `/decisioning/v2/customers/{customerId}/statement`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (callbackUrl !== undefined) {
                localVarQueryParameter['callbackUrl'] = callbackUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: statementReportConstraints,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/decisioning/v2/customers/{customerId}/statement',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(statementReportConstraints, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Statement
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {number} [index] Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement.
         * @param {string} [type] The type of statement to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerStatementInPdf: async (customerId: string, accountId: string, index?: number, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerStatementInPdf', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCustomerStatementInPdf', 'accountId', accountId)
            const localVarPath = `/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v1/customers/{customerId}/accounts/{accountId}/statement',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is retrieving the account statement for a given customer. The maximum number of indexes it will fetch for a single login is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Multiple Statements
         * @param {string} customerId A customer ID
         * @param {string} accountId The account ID
         * @param {string} [index] Request statements with comma-separated indexes ranged between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return a statement from six months ago.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleStatements: async (customerId: string, accountId: string, index?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getMultipleStatements', 'customerId', customerId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getMultipleStatements', 'accountId', accountId)
            const localVarPath = `/aggregation/v3/customers/{customerId}/accounts/{accountId}/statement`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication FinicityAppKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Key", keyParamName: "finicityAppKey", configuration })
            // authentication FinicityAppToken required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Finicity-App-Token", keyParamName: "finicityAppToken", configuration })
            if (index !== undefined) {
                localVarQueryParameter['index'] = index;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/aggregation/v3/customers/{customerId}/accounts/{accountId}/statement',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankStatementsApi - functional programming interface
 * @export
 */
export const BankStatementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankStatementsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Statement Report
         * @param {BankStatementsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateReport(requestParameters: BankStatementsApiGenerateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatementReportAck>> {
            const statementReportConstraints: StatementReportConstraints = {
                statementReportData: requestParameters.statementReportData,
                reportCustomFields: requestParameters.reportCustomFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateReport(requestParameters.customerId, statementReportConstraints, requestParameters.callbackUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Statement
         * @param {BankStatementsApiGetCustomerStatementInPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerStatementInPdf(requestParameters: BankStatementsApiGetCustomerStatementInPdfRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerStatementInPdf(requestParameters.customerId, requestParameters.accountId, requestParameters.index, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is retrieving the account statement for a given customer. The maximum number of indexes it will fetch for a single login is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Multiple Statements
         * @param {BankStatementsApiGetMultipleStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleStatements(requestParameters: BankStatementsApiGetMultipleStatementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAccountMultipleStatements>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleStatements(requestParameters.customerId, requestParameters.accountId, requestParameters.index, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankStatementsApi - factory interface
 * @export
 */
export const BankStatementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankStatementsApiFp(configuration)
    return {
        /**
         * Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Generate Statement Report
         * @param {BankStatementsApiGenerateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateReport(requestParameters: BankStatementsApiGenerateReportRequest, options?: AxiosRequestConfig): AxiosPromise<StatementReportAck> {
            return localVarFp.generateReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Statement
         * @param {BankStatementsApiGetCustomerStatementInPdfRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerStatementInPdf(requestParameters: BankStatementsApiGetCustomerStatementInPdfRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.getCustomerStatementInPdf(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is retrieving the account statement for a given customer. The maximum number of indexes it will fetch for a single login is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
         * @summary Get Customer Account Multiple Statements
         * @param {BankStatementsApiGetMultipleStatementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleStatements(requestParameters: BankStatementsApiGetMultipleStatementsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAccountMultipleStatements> {
            return localVarFp.getMultipleStatements(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateReport operation in BankStatementsApi.
 * @export
 * @interface BankStatementsApiGenerateReportRequest
 */
export type BankStatementsApiGenerateReportRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BankStatementsApiGenerateReport
    */
    readonly customerId: string
    
    /**
    * A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.
    * @type {string}
    * @memberof BankStatementsApiGenerateReport
    */
    readonly callbackUrl?: string
    
} & StatementReportConstraints

/**
 * Request parameters for getCustomerStatementInPdf operation in BankStatementsApi.
 * @export
 * @interface BankStatementsApiGetCustomerStatementInPdfRequest
 */
export type BankStatementsApiGetCustomerStatementInPdfRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BankStatementsApiGetCustomerStatementInPdf
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof BankStatementsApiGetCustomerStatementInPdf
    */
    readonly accountId: string
    
    /**
    * Request statements from 1-24. By default, 1 is the most recent statement. Increase the index value to count back (by month) and retrieve its most recent statement.
    * @type {number}
    * @memberof BankStatementsApiGetCustomerStatementInPdf
    */
    readonly index?: number
    
    /**
    * The type of statement to retrieve
    * @type {string}
    * @memberof BankStatementsApiGetCustomerStatementInPdf
    */
    readonly type?: string
    
}

/**
 * Request parameters for getMultipleStatements operation in BankStatementsApi.
 * @export
 * @interface BankStatementsApiGetMultipleStatementsRequest
 */
export type BankStatementsApiGetMultipleStatementsRequest = {
    
    /**
    * A customer ID
    * @type {string}
    * @memberof BankStatementsApiGetMultipleStatements
    */
    readonly customerId: string
    
    /**
    * The account ID
    * @type {string}
    * @memberof BankStatementsApiGetMultipleStatements
    */
    readonly accountId: string
    
    /**
    * Request statements with comma-separated indexes ranged between 1-24. The default value is 1 and it will return the most recent statement. Increasing the index will return older statements, for example, setting the index value to 6 will return a statement from six months ago.
    * @type {string}
    * @memberof BankStatementsApiGetMultipleStatements
    */
    readonly index?: string
    
}

/**
 * BankStatementsApiGenerated - object-oriented interface
 * @export
 * @class BankStatementsApiGenerated
 * @extends {BaseAPI}
 */
export class BankStatementsApiGenerated extends BaseAPI {
    /**
     * Generate a Statement Report for the given accounts under the given customer.  This is a premium service. A billable event will be created upon the successful generation of the Statement Report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Generate Statement Report
     * @param {BankStatementsApiGenerateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankStatementsApiGenerated
     */
    public generateReport(requestParameters: BankStatementsApiGenerateReportRequest, options?: AxiosRequestConfig) {
        return BankStatementsApiFp(this.configuration).generateReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the customer\'s bank statements in PDF format. Up to 24 months of history is available depending on the financial institution. Since this is a premium service, charges incur per each successful statement retrieved.  For certified financial institutions, statements are available for the following account types: * Checking * Savings * Money market * CDs * Investments * Mortgage * Credit cards * Loans * Line of credit * Student Loans  Note: setting the timeout to 180 seconds is recommended to allow enough time for a response.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Account Statement
     * @param {BankStatementsApiGetCustomerStatementInPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankStatementsApiGenerated
     */
    public getCustomerStatementInPdf(requestParameters: BankStatementsApiGetCustomerStatementInPdfRequest, options?: AxiosRequestConfig) {
        return BankStatementsApiFp(this.configuration).getCustomerStatementInPdf(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint is retrieving the account statement for a given customer. The maximum number of indexes it will fetch for a single login is 24.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * @summary Get Customer Account Multiple Statements
     * @param {BankStatementsApiGetMultipleStatementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankStatementsApiGenerated
     */
    public getMultipleStatements(requestParameters: BankStatementsApiGetMultipleStatementsRequest, options?: AxiosRequestConfig) {
        return BankStatementsApiFp(this.configuration).getMultipleStatements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
